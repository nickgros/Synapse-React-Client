{"version":3,"sources":["lib/utils/synapseTypes/Download/index.ts","lib/utils/synapseTypes/Table/index.ts","lib/utils/synapseTypes/Table/ColumnType.ts","lib/utils/synapseTypes/Table/SelectColumn.ts","lib/utils/synapseTypes/AccessRequirement/index.ts","lib/utils/synapseTypes/AccessRequirement/AccessRequirement.ts","lib/utils/synapseTypes/BulkFileDownloadRequest.ts","lib/utils/synapseTypes/Evaluation/index.ts","lib/utils/synapseTypes/Evaluation/Evaluation.ts","lib/utils/synapseTypes/FileDownloadSummary.ts","lib/utils/synapseTypes/FileEntity.ts","lib/utils/synapseTypes/FileHandleAssociation.ts","lib/utils/synapseTypes/ExternalFileHandleInterface.ts","lib/utils/synapseTypes/Forms.ts","lib/utils/synapseTypes/RestrictionInformation.ts","lib/utils/synapseTypes/AccessApproval.ts","lib/utils/synapseTypes/WikiPageKey.ts","images/logo.svg","images/homepage_1.svg","images/organizeResearch.svg","images/getCredit.svg","images/collaborate.svg","images/dataSharing.svg","images/rClient.svg","images/python.svg","images/terminal.svg","images/java.svg","lib/utils/functions/getEndpoint.ts","lib/assets/ButtonContent.tsx","lib/assets/GoogleIcon.tsx","lib/utils/SynapseConstants.ts","lib/utils/functions/dispatchDownloadListChangeEvent.ts","lib/utils/SynapseClient.ts","lib/containers/Login.tsx","lib/utils/functions/queryUtils.ts","lib/assets/icons/Arrow.tsx","lib/containers/Carousel.tsx","lib/utils/hooks/useShowDesktop.ts","lib/containers/home_page/project_view_carousel/ProjectViewCard.tsx","lib/containers/SignInButton.tsx","lib/containers/ErrorBanner.tsx","lib/containers/home_page/project_view_carousel/ProjectViewCarousel.tsx","lib/utils/hooks/useGetQueryResultBundle.ts","demo/containers/playground/SynapseHomepage.tsx","demo/containers/App.tsx","index.tsx","lib/utils/synapseTypes/index.ts","lib/utils/synapseTypes/EvaluationQueryTable/index.ts"],"names":["ColumnType","EntityColumnType","ACCESS_TYPE","ZipFileFormat","EvaluationStatus","FileDownloadStatus","FileDownloadCode","FileHandleAssociateType","ExternalFileHandleConcreteTypeEnum","StatusEnum","RestrictableObjectType","RestrictionLevel","ApprovalState","ObjectType","module","exports","BackendDestinationEnum","children","style","paddingRight","fontWeight","paddingLeft","icon","paddingTop","paddingBottom","textAlign","width","active","background","borderRadius","height","xmlns","fill","fillRule","d","BUNDLE_MASK_QUERY_RESULTS","BUNDLE_MASK_QUERY_COUNT","BUNDLE_MASK_QUERY_SELECT_COLUMNS","BUNDLE_MASK_QUERY_MAX_ROWS_PER_PAGE","BUNDLE_MASK_QUERY_COLUMN_MODELS","BUNDLE_MASK_QUERY_FACETS","BUNDLE_MASK_SUM_FILES_SIZE_BYTES","ENTITY_BUNDLE_MASK_ENTITY","ENTITY_BUNDLE_MASK_ANNOTATIONS","ENTITY_BUNDLE_MASK_PERMISSIONS","ENTITY_BUNDLE_MASK_ENTITY_PATH","ENTITY_BUNDLE_MASK_HAS_CHILDREN","ENTITY_BUNDLE_MASK_ACL","ENTITY_BUNDLE_MASK_FILE_HANDLES","ENTITY_BUNDLE_MASK_TABLE_DATA","ENTITY_BUNDLE_MASK_ROOT_WIKI_ID","ENTITY_BUNDLE_MASK_BENEFACTOR_ACL","ENTITY_BUNDLE_MASK_DOI","ENTITY_BUNDLE_MASK_FILE_NAME","ENTITY_BUNDLE_MASK_THREAD_COUNT","ENTITY_BUNDLE_MASK_RESTRICTION_INFORMATION","STUDY","VALUE_NOT_SET","STUDY_ACTIVE","STUDY_COMPLETE","DATABASE","DATASET","AMP_CONSORTIUM","FUNDER","PUBLICATION","TOOL","GENERIC_CARD","COMPUTATIONAL","EXPERIMENTAL","CLINICAL","PROJECT","GRANT","ORGANIZATION","PERSON","MOUSE","EXPLORE","SEARCH","CHART","FILTER","DOWNLOAD","EXPAND","COLLAPSE","CLOSE","SORTUP","SORTDOWN","SETTINGS","COLUMNS","COLUMNSDARK","VERTICAL_DOTS","FILE","CHART2","PAGE_SIZE","SMALL_USER_CARD","MEDIUM_USER_CARD","LARGE_USER_CARD","SEPERATOR","AUTHENTICATED_USERS","_TIME_DELAY","SRC_SIGN_IN_CLASS","USER_BUNDLE_MASK_USER_PROFILE","USER_BUNDLE_MASK_ORCID","USER_BUNDLE_MASK_VERIFICATION_SUBMISSION","USER_BUNDLE_MASK_IS_CERTIFIED","USER_BUNDLE_MASK_IS_VERIFIED","USER_BUNDLE_MASK_IS_ACT_MEMBER","USER_PROFILE_STORAGE_KEY","ENTITY_HEADER_STORAGE_KEY","PRODUCTION_ENDPOINT_CONFIG","REPO","PORTAL","getEndpoint","endpoint","endpoint_config","window","SRC","OVERRIDE_ENDPOINT_CONFIG","Error","PORTAL_ENDPOINT","dispatchDownloadListChangeEvent","downloadList","downloadEvent","CustomEvent","detail","document","dispatchEvent","cookies","UniversalCookies","IS_OUTSIDE_SYNAPSE_ORG","location","hostname","toLowerCase","includes","SESSION_TOKEN_COOKIE_KEY","AUTH_PROVIDER","SYNAPSE_STORAGE_LOCATION_ID","getRootURL","portString","port","protocol","delay","t","Promise","resolve","setTimeout","bind","RETRY_STATUS_CODES","fetchWithExponentialTimeout","url","options","delayMs","fetch","then","resp","text","json","JSON","parse","ok","reject","error","catch","reason","status","indexOf","doPost","requestJsonObject","sessionToken","initCredentials","body","stringify","headers","Accept","method","mode","credentials","usedEndpoint","doGet","doDelete","doPut","putRefreshSessionToken","undefined","REPO_ENDPOINT","getVersion","addFilesToDownloadList","request","updateParentState","requestUrl","token","getAsyncResultFromJobId","data","getDownloadFromTableRequest","entityId","getFileHandleById","handleId","getActualFileHandleByIdURL","fileAssociateType","fileAssociateId","redirect","open","err","console","getFileHandleByIdURL","urlRequest","jobState","asyncJobStatus","getQueryTableResults","queryBundleRequest","getFullQueryTableResults","a","offset","query","rest","queryRequest","partMask","SynapseConstants","response","isDone","queryResult","queryResults","rows","length","maxRowsPerPage","limit","push","login","username","password","authenticationReceipt","oAuthUrlRequest","provider","redirectUrl","oAuthSessionRequest","authenticationCode","createEntity","entity","createProject","name","concreteType","getUserProfile","getUserProfileById","ownerId","getUserBundle","id","mask","getGroupHeadersBatch","ids","join","getUserProfiles","list","getEntityChildren","lookupChildEntity","getFiles","getBulkFiles","bulkFileDownloadRequest","asyncJobId","getEntity","versionNumber","getEntityHeader","references","updateEntity","deleteEntity","getEntityBundleForVersion","version","partsMask","getObjectTypeToString","key","getEntityWiki","wikiId","objectType","ENTITY","objectTypeString","toLocaleLowerCase","getUserFavorites","getUserTeamList","getTeamList","fragment","getWikiPageKeyForEntity","getWikiPageKeyForAccessRequirement","getWikiAttachmentsFromEntity","getWikiAttachmentsFromEvaluation","getPresignedUrlForWikiAttachment","fileName","setSessionTokenCookie","sessionCallback","remove","path","set","maxAge","_","getSessionTokenFromCookie","get","getPrincipalAliasRequest","alias","type","detectSSOCode","redirectURL","code","URL","href","searchParams","synToken","originalUrl","localStorage","getItem","removeItem","replace","signOut","uploadFile","filename","file","fileUploadResolve","fileUploadReject","partSize","Math","max","size","contentType","fileSizeBytes","partSizeBytes","storageLocationId","calculateMd5","md5","contentMD5Hex","startMultipartUpload","fileBlob","blobSlice","File","prototype","slice","chunks","ceil","spark","SparkMD5","ArrayBuffer","fileReader","FileReader","currentChunk","onload","e","log","append","result","loadNext","end","info","onerror","warn","start","readAsArrayBuffer","call","processFilePart","partNumber","multipartUploadStatus","clientSidePartsState","uploadId","presignedUploadUrlRequest","partNumbers","presignedUrlUrl","presignedUrlResponse","presignedUrl","partPresignedUrls","uploadPresignedUrl","startByte","endByte","fileSlice","uploadFilePart","addPartUrl","addPartResponse","addPartState","checkUploadComplete","fileHandleName","every","v","newStatus","fileHandleId","resultFileHandleId","partsState","split","map","bit","i","getFileEntityContent","fileEntity","fileHandleAssociationList","associateObjectId","associateObjectType","dataFileHandleId","includeFileHandles","includePreSignedURLs","includePreviewPreSignedURLs","requestedFiles","preSignedURL","fileHandle","getFileHandleContent","content","getFileEntityFileHandle","FileEntity","failureCode","getFileHandleContentFromID","getFileHandleByIdPromise","getFileHandlePresignedUrlPromis","all","values","contentSize","cache","createACL","acl","submitToEvaluation","submission","etag","getEvaluationPermissions","evalId","getEvaluation","updateEvaluation","evaluation","createEvaluation","deleteEvaluation","getEvaluationRound","evalRoundId","getEvaluationRoundsList","evaluationRoundListRequest","createEvaluationRound","evaluationRound","evaluationId","updateEvaluationRound","deleteEvaluationRound","getEvaluationSubmissions","encodeURI","getOAuth2RequestDescription","oidcAuthRequest","hasUserAuthorizedOAuthClient","getOAuth2Client","clientId","consentToOAuth2Request","createFormGroup","getFormACL","formGroupId","updateFormACL","newAcl","createFormData","newFormData","updateFormData","formDataId","updatedFormData","deleteFormData","submitFormData","listFormData","listFormDataAsFormAdmin","acceptFormData","rejectFormData","formRejection","getProjectStatistics","getRestrictionInformation","getAccessRequirement","getAccessRequirementStatus","requirementId","getAllAccessRequirements","getAllOfPaginatedService","getAccessApproval","approvalId","postAccessApproval","accessApproval","getDownloadList","getDownloadOrder","zipFileName","baseURL","fn","existsMoreData","results","deleteDownloadListFiles","deleteDownloadList","updateTable","tableUpdateRequest","getTransformSqlWithFacetsRequest","transformSqlWithFacetsRequest","createPersonalAccessToken","accessTokenGenerationRequest","getPersonalAccessTokenRecords","nextPageToken","deletePersonalAccessToken","accessTokenId","Login","props","authenticationReceiptKey","state","email","errorMessage","hasLoginInFailed","isSignedIn","handleChange","handleLogin","getLoginFailureView","onGoogleSignIn","event","target","currentTarget","value","newState","this","setState","clickEvent","preventDefault","SynapseClient","setItem","className","googleRedirectUrl","authUrl","authorizationUrl","theme","googleTheme","onClick","GoogleIcon","ButtonContent","marginRight","alt","src","onSubmit","autoComplete","placeholder","onChange","React","getFieldIndex","selectColumns","findIndex","el","Arrow","viewBox","DesktopProps","clickToChange","infinite","slidesPerScroll","slidesPerPage","centered","arrowLeft","arrowRight","addArrowClickHandler","breakpoints","1100","MobileProps","dots","Carousel","isLoading","showDesktop","breakpoint","usedBreakpoint","useState","innerWidth","setShowDesktop","useEffect","listener","updatedValue","addEventListener","removeEventListener","useShowDesktop","currentIndex","setCurrentIndex","styledChildren","Children","child","index","b","childClass","cloneElement","display","refreshMode","noPlaceholder","ProjectViewCard","projectName","projectDescription","synId","image","domProps","Button","variant","SignInButton","ExpectedColumns","ClientError","loginError","accessDenied","ErrorBanner","synapseClientError","jsError","stringError","isSynapseClientError","message","isError","isString","Alert","dismissible","show","transition","ProjectViewCarousel","sql","projects","setProjects","setError","queryResultBundle","useDeepCompareEffect","getData","useGetQueryResultBundle","queryError","entityIdIndex","ID","displayNameColumnIndex","PROJECT_DISPLAY_NAME","descriptionColumnIndex","PROJECT_DESCRIPTION","nameColumnIndex","NAME","imageColumnIndex","PROJECT_IMAGE","row","imageFileName","project","wikiPageKey","wikiPageId","imageUrl","SynapseHomepage","homepage_1","organizeResearch","rel","getCredit","collaborate","dataSharing","rImage","python","terminal","java","margin","maxWidth","flexDirection","color","App","updatedState","getSession","getSessionCalled","signedInState","role","aria-hidden","notSignedInState","alert","logoSvg","ReactDOM","getElementById"],"mappings":"oIAAA,qZ,6FCAA,2xF,6FCCO,IAAKA,G,SAAAA,K,gBAAAA,E,gBAAAA,E,kBAAAA,E,kBAAAA,E,YAAAA,E,4BAAAA,E,oBAAAA,E,YAAAA,E,sBAAAA,E,gBAAAA,E,0BAAAA,E,4BAAAA,E,4BAAAA,E,uBAAAA,M,+OCDL,IAAKC,G,SAAAA,K,gBAAAA,E,gBAAAA,E,kBAAAA,E,kBAAAA,E,YAAAA,E,4BAAAA,E,oBAAAA,E,YAAAA,E,sBAAAA,E,gBAAAA,E,0BAAAA,E,4BAAAA,E,4BAAAA,E,uBAAAA,M,2DCAZ,84C,iCCEO,IAAKC,G,SAAAA,K,gBAAAA,E,YAAAA,E,gBAAAA,E,gBAAAA,E,wCAAAA,E,oBAAAA,E,gBAAAA,E,0BAAAA,E,gBAAAA,E,kDAAAA,E,sCAAAA,E,sCAAAA,E,gDAAAA,E,4BAAAA,E,kCAAAA,E,qBAAAA,M,2XCCL,IAAKC,G,SAAAA,K,oCAAAA,E,aAAAA,M,2ICHZ,smB,iCCEO,IAAKC,G,SAAAA,K,kBAAAA,E,YAAAA,E,gBAAAA,E,uBAAAA,M,mGCCL,IAAKC,EAMAC,G,SANAD,K,kBAAAA,E,mBAAAA,M,cAMAC,K,sBAAAA,E,4BAAAA,E,sBAAAA,E,wCAAAA,E,+BAAAA,M,uCCRZ,Q,qDCAO,IAAKC,EADZ,kC,SACYA,K,wBAAAA,E,0BAAAA,E,gCAAAA,E,4BAAAA,E,8CAAAA,E,sCAAAA,E,gCAAAA,E,4CAAAA,E,gDAAAA,E,0DAAAA,E,0DAAAA,E,iEAAAA,M,2DCAZ,IAEYC,EAFZ,Q,SAEYA,K,sEAAAA,E,kGAAAA,E,6EAAAA,M,+ECuCL,IAAKC,G,SAAAA,K,gDAAAA,E,4DAAAA,E,oBAAAA,E,qBAAAA,M,uRCzCL,IAAKC,EAaAC,G,SAbAD,K,gBAAAA,E,wBAAAA,E,aAAAA,M,cAaAC,K,YAAAA,E,wDAAAA,E,uCAAAA,M,mQCdL,IAAKC,G,SAAAA,K,oBAAAA,E,mBAAAA,M,uCCEL,IAAKC,EAFZ,kC,SAEYA,K,gBAAAA,E,oCAAAA,E,sBAAAA,E,oBAAAA,E,wBAAAA,E,wBAAAA,E,gDAAAA,E,YAAAA,E,kBAAAA,E,YAAAA,E,oBAAAA,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","file":"static/js/main.83a297ff.chunk.js","sourcesContent":["export * from './DownloadList'\nexport * from './DownloadOrder'","export * from './AsyncJobId'\nexport * from './AsynchronousJobStatus'\nexport * from './ColumnModel'\nexport * from './ColumnType'\nexport * from './CsvTableDescription'\nexport * from './DownloadFromTableRequest'\nexport * from './DownloadFromTableResult'\nexport * from './FacetColumnRequest'\nexport * from './FacetColumnResult'\nexport * from './FacetType'\nexport * from './Query'\nexport * from './QueryBundleRequest'\nexport * from './QueryResult'\nexport * from './QueryResultBundle'\nexport * from './SelectColumn'\nexport * from './SumFileSizes'","// https://docs.synapse.org/rest/org/sagebionetworks/repo/model/table/ColumnType.html\nexport enum ColumnType {\n  STRING = 'STRING',\n  DOUBLE = 'DOUBLE',\n  BOOLEAN = 'BOOLEAN',\n  INTEGER = 'INTEGER',\n  DATE = 'DATE',\n  FILEHANDLEID = 'FILEHANDLEID',\n  ENTITYID = 'ENTITYID',\n  LINK = 'LINK',\n  LARGETEXT = 'LARGETEXT',\n  USERID = 'USERID',\n  STRING_LIST = 'STRING_LIST',\n  INTEGER_LIST = 'INTEGER_LIST',\n  BOOLEAN_LIST = 'BOOLEAN_LIST',\n  DATE_LIST = 'DATE_LIST',\n}\n","export enum EntityColumnType {\n  STRING = 'STRING',\n  DOUBLE = 'DOUBLE',\n  BOOLEAN = 'BOOLEAN',\n  INTEGER = 'INTEGER',\n  DATE = 'DATE',\n  FILEHANDLEID = 'FILEHANDLEID',\n  ENTITYID = 'ENTITYID',\n  LINK = 'LINK',\n  LARGETEXT = 'LARGETEXT',\n  USERID = 'USERID',\n  STRING_LIST = 'STRING_LIST',\n  INTEGER_LIST = 'INTEGER_LIST',\n  BOOLEAN_LIST = 'BOOLEAN_LIST',\n  DATE_LIST = 'DATE_LIST',\n}\n\n// https://docs.synapse.org/rest/org/sagebionetworks/repo/model/table/SelectColumn.html\nexport type SelectColumn = {\n  name: string // The required display name of the column\n  columnType: EntityColumnType\n  // The column type determines the type of data that can be stored in a co\n  id: string // The optional ID of the select column, if this is a direct column selected\n}\n","export * from './AccessRequirement'\nexport * from './RestrictableObjectDescriptor'\nexport * from './SelfSignAccessRequirement'\nexport * from './SelfSignAccessRequirementInterface'\nexport * from './TermsOfUseAccessRequirement'\nexport * from './AccessRequirementStatus'\nexport * from './ManagedACTAccessRequirement'\nexport * from './ACTAccessRequirement'\n","import { RestrictableObjectDescriptor } from './RestrictableObjectDescriptor'\n\nexport enum ACCESS_TYPE {\n  CREATE = 'CREATE',\n  READ = 'READ',\n  UPDATE = 'UPDATE',\n  DELETE = 'DELETE',\n  CHANGE_PERMISSIONS = 'CHANGE_PERMISSIONS',\n  DOWNLOAD = 'DOWNLOAD',\n  UPLOAD = 'UPLOAD',\n  PARTICIPATE = 'PARTICIPATE',\n  SUBMIT = 'SUBMIT',\n  READ_PRIVATE_SUBMISSION = 'READ_PRIVATE_SUBMISSION',\n  UPDATE_SUBMISSION = 'UPDATE_SUBMISSION',\n  DELETE_SUBMISSION = 'DELETE_SUBMISSION',\n  TEAM_MEMBERSHIP_UPDATE = 'TEAM_MEMBERSHIP_UPDATE',\n  SEND_MESSAGE = 'SEND_MESSAGE',\n  CHANGE_SETTINGS = 'CHANGE_SETTINGS',\n  MODERATE = 'MODERATE',\n}\n\nexport interface AccessRequirement {\n  versionNumber: number //\tThe version number issued to this version on the object.\n  id: number //\tThe unique immutable ID. Provided by the system, the user may not set this field.\n  etag: string //\tSynapse employs an Optimistic Concurrency Control (OCC) scheme to handle concurrent updates. Since the E-Tag changes every time an entity is updated it is used to detect when a client's current representation of an object is out-of-date.\n  createdOn: string //\tThe date this object was created. Provided by the system, the user may not set this field.\n  modifiedOn: string //\tThe date this object was last modified. Provided by the system, the user may not set this field.\n  createdBy: string //\tThe user that created this object. Provided by the system, the user may not set this field.\n  modifiedBy: string //\tThe user that last modified this object. Provided by the system, the user may not set this field.\n  subjectIds: Array<RestrictableObjectDescriptor> // The IDs of the items controlled by this Access Requirement. Required when creating or updating.\n  accessType: ACCESS_TYPE //\tThe enumeration of possible permission.\n  concreteType: string //\tIndicates which type of AccessRequirement this object represents. Provided by the system, the user may not set this field.\n}\n","import { FileHandleAssociation } from './FileHandleAssociation'\n\n// https://docs.synapse.org/rest/org/sagebionetworks/repo/model/file/ZipFileFormat.html\nexport enum ZipFileFormat {\n  CommandLineCache = 'CommandLineCache', // This is the default format. Zip file format structure is: (%1000)//\n  Flat = 'Flat', // Files are writtent to the zip 'flat' with no directory structure.\n  //Each file is named after the original file. Duplicate file names are appended with a number in parenthesis to ensure all names are unique.\n}\n\n// Request for a bulk file download.\n// https://docs.synapse.org/rest/org/sagebionetworks/repo/model/file/BulkFileDownloadRequest.html\nexport type BulkFileDownloadRequest = {\n  concreteType: 'org.sagebionetworks.repo.model.file.BulkFileDownloadRequest'\n  requestedFiles: FileHandleAssociation[] // The files to be included in the download.\n  zipFileName: string // Optional parameter to set the name of the resulting zip file.\n  zipFileFormat?: ZipFileFormat // Enumeration of all possible zip file formats produced by bulk file download worker\n}\n","export * from './Evaluation'\nexport * from './EvaluationRound'\nexport * from './EvaluationRoundLimit'\nexport * from './SubmissionQuota'\n","import { SubmissionQuota } from './SubmissionQuota'\n\nexport enum EvaluationStatus {\n  PLANNED = 'PLANNED',\n  OPEN = 'OPEN',\n  CLOSED = 'CLOSED',\n  COMPLETED = 'COMPLETED',\n}\n\n// https://docs.synapse.org/rest/org/sagebionetworks/evaluation/model/Evaluation.html\nexport type Evaluation = {\n  id?: string\n  etag?: string\n  name?: string\n  description?: string\n  ownerId?: string\n  createdOn?: string\n  contentSource?: string\n  status?: EvaluationStatus\n  submissionInstructionsMessage?: string\n  submissionReceiptMessage?: string\n  /** @deprecated use REST APIs for EvaluationRound instead */\n  quota?: SubmissionQuota\n}\n","import { FileHandleAssociateType } from './FileHandleAssociation'\n\n// The download status of this file.\nexport enum FileDownloadStatus {\n  SUCCESS = 'SUCCESS',\n  FAILURE = 'FAILURE',\n}\n\n// If the download status of this file is set to 'FAILURE', then this will be the failure code. Null for 'SUCCESS'.\nexport enum FileDownloadCode {\n  NOT_FOUND = 'NOT_FOUND',\n  UNAUTHORIZED = 'UNAUTHORIZED',\n  DUPLICATE = 'DUPLICATE',\n  EXCEEDS_SIZE_LIMIT = 'EXCEEDS_SIZE_LIMIT',\n  UNKNOWN_ERROR = 'UNKNOWN_ERROR',\n}\n\n// https://docs.synapse.org/rest/org/sagebionetworks/repo/model/file/FileDownloadSummary.html\nexport type FileDownloadSummary = {\n  fileHandleId: string //\tThe file handle id of a requested file.\n  associateObjectId: string //\tThe ID of the object associated with the file\n  associateObjectType: FileHandleAssociateType //\tEnumeration of all possible objects types that can be associated with a file.\n  zipEntryName: string //\tThe zip entry name used for this file. This entry includes both the path and file name. The value will only be set if the status is set to 'SUCCESS'\n  status: FileDownloadStatus //\tThe download status of this file.\n  failureMessage: string //\tIf the download status of this file is set to 'FAILURE', then this will be the failure message. Null for 'SUCCESS'.\n  failureCode: FileDownloadCode | null // If the download status of this file is set to 'FAILURE', then this will be the failure code. Null for 'SUCCESS'.\n}\n","import { Entity } from './Entity'\nimport { AssertionError } from 'assert'\n\n// https://docs.synapse.org/rest/org/sagebionetworks/repo/model/FileEntity.html\nexport interface FileEntity extends Entity {\n  concreteType: 'org.sagebionetworks.repo.model.FileEntity'\n  versionNumber?: number // \tThe version number issued to this version on the object.\n  versionLabel?: string // \tThe version label for this entity\n  versionComment?: string // \tThe version comment for this entity\n  versionUrl?: string // \tThe full URL of this exect version. This URL is provided by Synapse.\n  versions?: string // \tThe URL to get all versions of this entity. This URL is provided by Synapse.\n  dataFileHandleId: string // \tID of the file associated with this entity.\n  fileNameOverride?: string // \tAn optional replacement for the name of the uploaded file. This is distinct from the entity name. If omitted the file will retain its original name.\n}\n\nexport function assertIsFileEntity(val: Entity): asserts val is FileEntity {\n  if (val.concreteType !== 'org.sagebionetworks.repo.model.FileEntity') {\n    throw new AssertionError({\n      message: `File Entity exepcted but found ${val}`,\n    })\n  }\n}\n","// http://rest-docs.synapse.org/rest/org/sagebionetworks/repo/model/file/FileHandleAssociateType.html\nexport enum FileHandleAssociateType {\n  FileEntity = 'FileEntity',\n  TableEntity = 'TableEntity',\n  WikiAttachment = 'WikiAttachment',\n  WikiMarkdown = 'WikiMarkdown',\n  UserProfileAttachment = 'UserProfileAttachment',\n  MessageAttachment = 'MessageAttachment',\n  TeamAttachment = 'TeamAttachment',\n  SubmissionAttachment = 'SubmissionAttachment',\n  VerificationSubmission = 'VerificationSubmission',\n  AccessRequirementAttachment = 'AccessRequirementAttachment',\n  DataAccessRequestAttachment = 'DataAccessRequestAttachment',\n  DataAccessSubmissionAttachment = 'DataAccessSubmissionAttachment',\n}\n\nexport type FileHandleAssociation = {\n  fileHandleId: string //\tThe ID of the FileHandle.\n  associateObjectId: string //\tThe ID of the object associated with the file\n  associateObjectType: FileHandleAssociateType //\tEnumeration of all possible objects types that can be associated with a file.\n}\n","import { FileHandle } from './FileHandle'\nimport { AssertionError } from 'assert'\n\nexport enum ExternalFileHandleConcreteTypeEnum {\n  ProxyFileHandle = 'org.sagebionetworks.repo.model.file.ProxyFileHandle',\n  ExternalObjectStoreFileHandle = 'org.sagebionetworks.repo.model.file.ExternalObjectStoreFileHandle',\n  ExternalFileHandle = 'org.sagebionetworks.repo.model.file.ExternalFileHandle',\n}\n\n/*\nhttps://docs.synapse.org/rest/org/sagebionetworks/repo/model/file/ExternalObjectStoreFileHandle.html\nRepresents a file stored in an S3 Bucket to which Synapse cannot access. \nTogether with ExternalObjectStorageLocationSetting, this object provides the information the client requires to access the S3 file.\n\n*/\nexport type ExternalObjectStoreFileHandle = ExternalFileHandleInterface & {\n  concreteType: ExternalFileHandleConcreteTypeEnum.ExternalObjectStoreFileHandle // This is used to indicate the implementation of this interface. For example, an S3FileHandle should be set to: org.sagebionetworks.repo.model.file.S3FileHandle\n  filePath: string //\tSTRING\tThe relative path of this file within the proxy.\n}\n\nexport function assertIsExternalFileHandle(\n  x?: FileHandle,\n): asserts x is ExternalFileHandle {\n  if (\n    x?.concreteType !== ExternalFileHandleConcreteTypeEnum.ExternalFileHandle\n  ) {\n    throw new AssertionError({\n      message: ` ExternalFileHandle expected but found ${x}`,\n    })\n  }\n}\n\n/*\n  https://docs.synapse.org/rest/org/sagebionetworks/repo/model/file/ExternalFileHandle.html\n  An ExternalFileHandle represents a file that is not stored in Synapse. Instead, ExternalFileHandles reside somewhere accessible via a URL. Synapse will attempt to generate a preview for any external URL that can be publicly read.\n*/\nexport type ExternalFileHandle = ExternalFileHandleInterface & {\n  concreteType: ExternalFileHandleConcreteTypeEnum.ExternalFileHandle // This is used to indicate the implementation of this interface. For example, an S3FileHandle should be set to: org.sagebionetworks.repo.model.file.S3FileHandle\n  externalURL: string //\tThe external URL of this file.\n}\n\n/*\n https://docs.synapse.org/rest/org/sagebionetworks/repo/model/file/ProxyFileHandle.html\n Reference to a file that accessible via a proxy server. Each ProxyFileHandle must reference a ProxyStorageLocationSettings that defines how the files are accessed.\n*/\nexport type ProxyFileHandle = ExternalFileHandleInterface & {\n  concreteType: ExternalFileHandleConcreteTypeEnum.ProxyFileHandle // This is used to indicate the implementation of this interface. For example, an S3FileHandle should be set to: org.sagebionetworks.repo.model.file.S3FileHandle\n  filePath: string //\tSTRING\tThe relative path of this file within the proxy.\n}\n\n// https://www.typescriptlang.org/docs/handbook/advanced-types.html#typeof-type-guards\nexport function implementsExternalFileHandleInterface(\n  x: ExternalFileHandleInterface,\n): x is ExternalFileHandleInterface {\n  return Object.values<string>(ExternalFileHandleConcreteTypeEnum).includes(\n    x.concreteType,\n  )\n}\n\n/* \n  Defines FileHandles for files that are stored externally and can not be controlled by Synapse. \n  All file access authentication and download/upload/delete operations are delegated the client.\n\n  Note - while the interface is empty this keeps parity between the backend and frontend types.\n*/\nexport interface ExternalFileHandleInterface extends FileHandle {}\n","//https://docs.synapse.org/rest/org/sagebionetworks/repo/model/form/FormGroup.html\nexport type FormGroup = {\n  groupId: string\n  name: string\n  createdBy: string\n  createdOn: string\n}\n\n// see https://docs.synapse.org/rest/org/sagebionetworks/repo/model/form/FormData.html\nexport type FormData = {\n  formDataId: string\n  etag: string\n  groupId: string\n  name: string\n  createdBy: string\n  createdOn: string\n  modifiedOn: string\n  dataFileHandleId: string\n  submissionStatus: SubmissionStatus\n}\n\n// see https://docs.synapse.org/rest/org/sagebionetworks/repo/model/form/FormChangeRequest.html\nexport type FormChangeRequest = {\n  name: string\n  fileHandleId: string\n}\n\n// see https://docs.synapse.org/rest/org/sagebionetworks/repo/model/form/FormRejection.html\nexport type FormRejection = {\n  reason: string\n}\n\n// see https://docs.synapse.org/rest/org/sagebionetworks/repo/model/form/SubmissionStatus.html\nexport type SubmissionStatus = {\n  submittedOn?: string\n  reviewedOn?: string\n  reviewedBy?: string\n  state: StatusEnum\n  rejectionMessage?: string\n}\n\n// see https://docs.synapse.org/rest/org/sagebionetworks/repo/model/form/StatusEnum.html\nexport enum StatusEnum {\n  WAITING_FOR_SUBMISSION = 'WAITING_FOR_SUBMISSION',\n  SUBMITTED_WAITING_FOR_REVIEW = 'SUBMITTED_WAITING_FOR_REVIEW',\n  ACCEPTED = 'ACCEPTED',\n  REJECTED = 'REJECTED',\n}\n\n// see https://docs.synapse.org/rest/org/sagebionetworks/repo/model/form/ListRequest.html\nexport type ListRequest = {\n  filterByState?: StatusEnum[]\n  groupId: string\n  nextPageToken?: string\n}\n\n// see https://docs.synapse.org/rest/org/sagebionetworks/repo/model/form/ListResponse.html\nexport type ListResponse = {\n  page: FormData[]\n  nextPageToken?: string\n}\n","// see https://docs.synapse.org/rest/org/sagebionetworks/repo/model/RestrictableObjectType.html\nexport enum RestrictableObjectType {\n  ENTITY = 'ENTITY',\n  EVALUATION = 'EVALUATION',\n  TEAM = 'TEAM',\n}\n\n// see https://docs.synapse.org/rest/org/sagebionetworks/repo/model/RestrictionInformationRequest.html\nexport type RestrictionInformationRequest = {\n  restrictableObjectType: RestrictableObjectType\n  objectId: string\n}\n\n// see https://docs.synapse.org/rest/org/sagebionetworks/repo/model/RestrictionLevel.html\nexport enum RestrictionLevel {\n  OPEN = 'OPEN',\n  RESTRICTED_BY_TERMS_OF_USE = 'RESTRICTED_BY_TERMS_OF_USE',\n  CONTROLLED_BY_ACT = 'CONTROLLED_BY_ACT',\n}\n\n// see https://docs.synapse.org/rest/org/sagebionetworks/repo/model/RestrictionInformationResponse.html\nexport type RestrictionInformationResponse = {\n  restrictionLevel: RestrictionLevel\n  hasUnmetAccessRequirement: boolean\n}\n","export enum ApprovalState {\n  APPROVED = 'APPROVED',\n  REVOKED = 'REVOKED',\n}\n\nexport interface AccessApproval {\n  id?: number //\tThe unique immutable ID\n  etag?: string //\tSynapse employs an Optimistic Concurrency Control (OCC) scheme to handle concurrent updates. Since the E-Tag changes every time an entity is updated it is used to detect when a client's current representation of an object is out-of-date.\n  createdOn?: string //\tThe date this object was created.\n  modifiedOn?: string //\tThe date this object was last modified.\n  createdBy?: string //\tThe user that created this object.\n  modifiedBy?: string //\tThe user that last modified this object.\n  requirementId: number //\tThe ID of the Access Requirement that this object approves.\n  requirementVersion?: number //\tThe version of the Access Requirement that this object approves.\n  submitterId: string //\tThe user who performed the necessary action(s) to gain this approval.\n  accessorId: string //\tThe ID of the principal (user or group) approved for access\n  expiredOn?: string //\tThe date this object will be expired.\n  state: ApprovalState //\tJSON enum for the state of AccessApproval\n}\n","// https://rest-docs.synapse.org/rest/org/sagebionetworks/repo/model/ObjectType.html\n\nexport enum ObjectType {\n    ENTITY = 'ENTITY',\n    ENTITY_CONTAINER = 'ENTITY_CONTAINER', \t\n    PRINCIPAL = 'PRINCIPAL',\t\n    ACTIVITY = 'ACTIVITY',\t\n    EVALUATION = 'EVALUATION',\t\n    SUBMISSION = 'SUBMISSION',\t\n    EVALUATION_SUBMISSIONS = 'EVALUATION_SUBMISSIONS',\t\n    FILE = 'FILE',\t\n    MESSAGE = 'MESSAGE', \n    WIKI = 'WIKI',\t\n    FAVORITE = 'FAVORITE',\t\n    ACCESS_REQUIREMENT = 'ACCESS_REQUIREMENT',\t\n    ACCESS_APPROVAL = 'ACCESS_APPROVAL',\t\n    TEAM = 'TEAM',\t\n    TABLE = 'TABLE',\t\n    ACCESS_CONTROL_LIST = 'ACCESS_CONTROL_LIST',\t\n    PROJECT_SETTING = 'PROJECT_SETTING',\t\n    VERIFICATION_SUBMISSION = 'VERIFICATION_SUBMISSION',\t\n    CERTIFIED_USER_PASSING_RECORD = 'CERTIFIED_USER_PASSING_RECORD',\t\n    FORUM = 'FORUM',\t\n    THREAD = 'THREAD',\t\n    REPLY = 'REPLY',\t\n    FORM_GROUP = 'FORM_GROUP',\t\n    FORM_DATA = 'FORM_DATA',\t\n    ENTITY_VIEW = 'ENTITY_VIEW',\t\n    USER_PROFILE = 'USER_PROFILE',\t\n    DATA_ACCESS_REQUEST = 'DATA_ACCESS_REQUEST',\t\n    DATA_ACCESS_SUBMISSION = 'DATA_ACCESS_SUBMISSION',\t\n    DATA_ACCESS_SUBMISSION_STATUS = 'DATA_ACCESS_SUBMISSION_STATUS',\t\n    MEMBERSHIP_INVITATION = 'MEMBERSHIP_INVITATION',\n}\n\n// https://rest-docs.synapse.org/rest/org/sagebionetworks/repo/model/dao/WikiPageKey.html\n\nexport type WikiPageKey = {\n    \n    wikiPageId: string\t//The ID of the wiki page.\n    ownerObjectId: string\t//The owner of this page.\n    ownerObjectType: ObjectType\t//JSON enum for the types of objects in Synapse.\n\n  }\n  ","module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","module.exports = __webpack_public_path__ + \"static/media/homepage_1.d86a9e0d.svg\";","module.exports = __webpack_public_path__ + \"static/media/organizeResearch.ced8fba8.svg\";","module.exports = __webpack_public_path__ + \"static/media/getCredit.a849487e.svg\";","module.exports = __webpack_public_path__ + \"static/media/collaborate.773e1605.svg\";","module.exports = __webpack_public_path__ + \"static/media/dataSharing.58278321.svg\";","module.exports = __webpack_public_path__ + \"static/media/rClient.c3244f52.svg\";","module.exports = __webpack_public_path__ + \"static/media/python.ff739730.svg\";","module.exports = __webpack_public_path__ + \"static/media/terminal.2f025777.svg\";","module.exports = __webpack_public_path__ + \"static/media/java.d08abb59.svg\";","export enum BackendDestinationEnum {\n  REPO_ENDPOINT,\n  PORTAL_ENDPOINT,\n}\n\n// Encodes the portal and repo service destinations\ntype EndpointObject = {\n  REPO: string\n  PORTAL: string\n}\n\nexport const PRODUCTION_ENDPOINT_CONFIG: EndpointObject = {\n  REPO: 'https://repo-prod.prod.sagebase.org/',\n  PORTAL: 'https://www.synapse.org/',\n}\n\n// Given an endpoint will return the specific stack object\nexport const getEndpoint = (endpoint: BackendDestinationEnum): string => {\n  let endpoint_config = PRODUCTION_ENDPOINT_CONFIG\n  // @ts-ignore if overriding endpoint config\n  if (window.SRC && window.SRC.OVERRIDE_ENDPOINT_CONFIG) {\n    // @ts-ignore\n    endpoint_config = window.SRC && window.SRC.OVERRIDE_ENDPOINT_CONFIG\n  }\n  const { PORTAL, REPO } = endpoint_config\n  if (!PORTAL || !REPO) {\n    throw Error('Error failed to specify endpoints, cannot make call')\n  }\n  if (endpoint === BackendDestinationEnum.PORTAL_ENDPOINT) {\n    return PORTAL\n  }\n  return REPO\n}\n","import * as React from 'react'\n\nexport default ({ children, icon }: { children: any; icon?: any }) => {\n  const style: React.CSSProperties = {\n    paddingRight: 10,\n    fontWeight: 500,\n    paddingLeft: icon ? 0 : 10,\n    paddingTop: 10,\n    paddingBottom: 10,\n    textAlign: 'center',\n    width: '100%',\n  }\n  return <span style={style}>{children}</span>\n}\n","import * as React from 'react'\n// @ts-nocheck\nexport default ({ active }: { active: boolean }) => (\n  <div\n    style={{\n      background: active ? '#fff' : '#eee',\n      paddingTop: 7,\n      paddingRight: 10,\n      paddingBottom: 4,\n      paddingLeft: 10,\n      borderRadius: 2,\n    }}\n  >\n    <svg width=\"18\" height=\"18\" xmlns=\"http://www.w3.org/2000/svg\">\n      <g fill=\"#000\" fillRule=\"evenodd\">\n        <path\n          // tslint:disable-next-line:max-line-length\n          d=\"M9 3.48c1.69 0 2.83.73 3.48 1.34l2.54-2.48C13.46.89 11.43 0 9 0 5.48 0 2.44 2.02.96 4.96l2.91 2.26C4.6 5.05 6.62 3.48 9 3.48z\"\n          fill=\"#EA4335\"\n        />\n        <path\n          // tslint:disable-next-line:max-line-length\n          d=\"M17.64 9.2c0-.74-.06-1.28-.19-1.84H9v3.34h4.96c-.1.83-.64 2.08-1.84 2.92l2.84 2.2c1.7-1.57 2.68-3.88 2.68-6.62z\"\n          fill=\"#4285F4\"\n        />\n        <path\n          // tslint:disable-next-line:max-line-length\n          d=\"M3.88 10.78A5.54 5.54 0 0 1 3.58 9c0-.62.11-1.22.29-1.78L.96 4.96A9.008 9.008 0 0 0 0 9c0 1.45.35 2.82.96 4.04l2.92-2.26z\"\n          fill=\"#FBBC05\"\n        />\n        <path\n          // tslint:disable-next-line:max-line-length\n          d=\"M9 18c2.43 0 4.47-.8 5.96-2.18l-2.84-2.2c-.76.53-1.78.9-3.12.9-2.38 0-4.4-1.57-5.12-3.74L.97 13.04C2.45 15.98 5.48 18 9 18z\"\n          fill=\"#34A853\"\n        />\n        <path fill=\"none\" d=\"M0 0h18v18H0z\" />\n      </g>\n    </svg>\n  </div>\n)\n","import { UserCardSize } from '../containers/UserCard'\n\n/** QueryBundleRequest constants */\nexport const BUNDLE_MASK_QUERY_RESULTS: number = 1\nexport const BUNDLE_MASK_QUERY_COUNT: number = 2\nexport const BUNDLE_MASK_QUERY_SELECT_COLUMNS: number = 4\nexport const BUNDLE_MASK_QUERY_MAX_ROWS_PER_PAGE: number = 8\nexport const BUNDLE_MASK_QUERY_COLUMN_MODELS: number = 16\nexport const BUNDLE_MASK_QUERY_FACETS: number = 32\nexport const BUNDLE_MASK_SUM_FILES_SIZE_BYTES: number = 64\n/** EntityBundle constants */\nexport const ENTITY_BUNDLE_MASK_ENTITY: number = 1\nexport const ENTITY_BUNDLE_MASK_ANNOTATIONS: number = 2\nexport const ENTITY_BUNDLE_MASK_PERMISSIONS: number = 4\nexport const ENTITY_BUNDLE_MASK_ENTITY_PATH: number = 8\nexport const ENTITY_BUNDLE_MASK_HAS_CHILDREN: number = 32\nexport const ENTITY_BUNDLE_MASK_ACL: number = 64\nexport const ENTITY_BUNDLE_MASK_FILE_HANDLES: number = 2048\nexport const ENTITY_BUNDLE_MASK_TABLE_DATA: number = 4096\nexport const ENTITY_BUNDLE_MASK_ROOT_WIKI_ID: number = 8192\nexport const ENTITY_BUNDLE_MASK_BENEFACTOR_ACL: number = 16384\nexport const ENTITY_BUNDLE_MASK_DOI: number = 32768\nexport const ENTITY_BUNDLE_MASK_FILE_NAME: number = 65536\nexport const ENTITY_BUNDLE_MASK_THREAD_COUNT: number = 131072\nexport const ENTITY_BUNDLE_MASK_RESTRICTION_INFORMATION: number = 262144\n/** Row Types  */\nexport const STUDY: string = 'study'\n/** Unannotated value for query */\nexport const VALUE_NOT_SET = 'org.sagebionetworks.UNDEFINED_NULL_NOTSET'\n// for study icons\nexport const STUDY_ACTIVE: string = 'study active'\nexport const STUDY_COMPLETE: string = 'study complete'\nexport const DATABASE: string = 'database'\nexport const DATASET: string = 'dataset'\nexport const AMP_CONSORTIUM: string = 'AMP_Consortium'\nexport const FUNDER: string = 'funder'\nexport const PUBLICATION: string = 'publication'\nexport const TOOL: string = 'tool'\nexport const GENERIC_CARD: string = 'GENERIC_CARD'\nexport const COMPUTATIONAL: string = 'computational'\nexport const EXPERIMENTAL: string = 'experimental'\nexport const CLINICAL: string = 'clinical'\nexport const PROJECT: string = 'Project'\nexport const GRANT: string = 'Grant'\nexport const ORGANIZATION: string = 'ORGANIZATION'\nexport const PERSON: string = 'PERSON'\nexport const MOUSE: string = 'MOUSE'\nexport const EXPLORE: string = 'explore'\nexport const SEARCH: string = 'search'\nexport const CHART: string = 'chart'\nexport const FILTER: string = 'filter'\nexport const DOWNLOAD: string = 'download'\nexport const EXPAND: string = 'expand'\nexport const COLLAPSE: string = 'collapse'\nexport const CLOSE: string = 'close'\nexport const SORTUP: string = 'sortup'\nexport const SORTDOWN: string = 'sortdown'\nexport const SETTINGS: string = 'settings'\nexport const COLUMNS: string = 'columns'\nexport const COLUMNSDARK: string = 'columnsdark'\nexport const VERTICAL_DOTS: string = 'verticaldots'\nexport const FILE: string = 'file'\nexport const CHART2: string = 'chart2'\n\nexport const PAGE_SIZE: number = 25\n// For User Profile Cards\nexport const SMALL_USER_CARD: UserCardSize = 'SMALL USER CARD'\nexport const MEDIUM_USER_CARD: UserCardSize = 'MEDIUM USER CARD'\nexport const LARGE_USER_CARD: UserCardSize = 'LARGE USER CARD'\nexport const SEPERATOR = 'SEPERATOR'\nexport const AUTHENTICATED_USERS = 'AUTHENTICATED_USERS'\n// For internal testing only\nexport const _TIME_DELAY = 75\nexport const SRC_SIGN_IN_CLASS = 'SRC-SIGN-IN-CLASS'\n\n// UserBundle constants\nexport const USER_BUNDLE_MASK_USER_PROFILE = 0x1\nexport const USER_BUNDLE_MASK_ORCID = 0x2\nexport const USER_BUNDLE_MASK_VERIFICATION_SUBMISSION = 0x4\nexport const USER_BUNDLE_MASK_IS_CERTIFIED = 0x8\nexport const USER_BUNDLE_MASK_IS_VERIFIED = 0x10\nexport const USER_BUNDLE_MASK_IS_ACT_MEMBER = 0x2\n// SessionStorage keys for info from ids\nexport const USER_PROFILE_STORAGE_KEY = 'INFO_FROM_IDS_USER_PROFILE'\nexport const ENTITY_HEADER_STORAGE_KEY = 'INFO_FROM_IDS_ENTITY_HEADER'\n","import { DownloadList } from '../synapseTypes'\n\nexport const DOWNLOAD_LIST_CHANGE_EVENT = 'DOWNLOAD_LIST_UPDATED_EVENT'\n\nexport const dispatchDownloadListChangeEvent = (\n  downloadList: DownloadList | undefined,\n) => {\n  const downloadEvent = new CustomEvent(DOWNLOAD_LIST_CHANGE_EVENT, {\n    detail: downloadList,\n  })\n  document.dispatchEvent(downloadEvent)\n}\n","import SparkMD5 from 'spark-md5'\nimport { BackendDestinationEnum, getEndpoint } from './functions/getEndpoint'\nimport {\n  AccessCodeResponse,\n  AccessControlList,\n  AddFilesToDownloadListRequest,\n  AddFilesToDownloadListResponse,\n  AddPartResponse,\n  AsyncJobId,\n  BatchFileRequest,\n  BatchFileResult,\n  BatchPresignedUploadUrlRequest,\n  BatchPresignedUploadUrlResponse,\n  BulkFileDownloadRequest,\n  BulkFileDownloadResponse,\n  DownloadFromTableRequest,\n  DownloadFromTableResult,\n  DownloadList,\n  DownloadOrder,\n  Entity,\n  EntityHeader,\n  EntityLookupRequest,\n  FileEntity,\n  FileHandle,\n  FileHandleAssociation,\n  FileHandleResults,\n  FileUploadComplete,\n  FormChangeRequest,\n  FormData,\n  FormGroup,\n  FormRejection,\n  ListRequest,\n  ListResponse,\n  LoginResponse,\n  MultipartUploadRequest,\n  MultipartUploadStatus,\n  OAuthClientPublic,\n  OAuthConsentGrantedResponse,\n  OIDCAuthorizationRequest,\n  OIDCAuthorizationRequestDescription,\n  PaginatedResults,\n  ProjectFilesStatisticsRequest,\n  ProjectFilesStatisticsResponse,\n  QueryBundleRequest,\n  QueryResultBundle,\n  QueryTableResults,\n  ReferenceList,\n  RestrictionInformationRequest,\n  RestrictionInformationResponse,\n  Submission,\n  SynapseVersion,\n  UserBundle,\n  UserGroupHeaderResponsePage,\n  UserProfile,\n  WikiPage,\n  AccessRequirement,\n  AccessApproval,\n  EntityId,\n  WikiPageKey,\n  ObjectType,\n  AccessRequirementStatus,\n  FileHandleAssociateType,\n  Evaluation,\n  EvaluationRound,\n} from './synapseTypes/'\nimport UniversalCookies from 'universal-cookie'\nimport { dispatchDownloadListChangeEvent } from './functions/dispatchDownloadListChangeEvent'\nimport { TableUpdateTransactionRequest } from './synapseTypes/Table/TableUpdate'\nimport {\n  TransformSqlWithFacetsRequest,\n  SqlTransformResponse,\n} from './synapseTypes/Table/TransformSqlWithFacetsRequest'\nimport { SynapseConstants } from '.'\nimport { EvaluationRoundListRequest } from './synapseTypes/Evaluation/EvaluationRoundListRequest'\nimport { EvaluationRoundListResponse } from './synapseTypes/Evaluation/EvaluationRoundListResponse'\nimport { AccessTokenGenerationRequest } from './synapseTypes/AccessToken/AccessTokenGenerationRequest'\nimport { AccessTokenGenerationResponse } from './synapseTypes/AccessToken/AccessTokenGenerationResponse'\nimport { AccessTokenRecordList } from './synapseTypes/AccessToken/AccessTokenRecord'\nimport { UserEvaluationPermissions } from './synapseTypes/Evaluation/UserEvaluationPermissions'\n\nconst cookies = new UniversalCookies()\n\n// TODO: Create JSON response types for all return types\nexport const IS_OUTSIDE_SYNAPSE_ORG = window.location.hostname\n  .toLowerCase()\n  .includes('.synapse.org')\n  ? false\n  : true\n\nexport const SESSION_TOKEN_COOKIE_KEY =\n  'org.sagebionetworks.security.user.login.token'\n\n// Max size file that we will allow the caller to read into memory (5MB)\nconst MAX_JS_FILE_DOWNLOAD_SIZE = 5242880\nexport const AUTH_PROVIDER = 'GOOGLE_OAUTH_2_0'\n// This corresponds to the Synapse-managed S3 storage location:\nexport const SYNAPSE_STORAGE_LOCATION_ID = 1\nexport const getRootURL = () => {\n  const portString = window.location.port ? `:${window.location.port}` : ''\n  return `${window.location.protocol}//${window.location.hostname}${portString}/`\n}\n\n/**\n * Waits t number of milliseconds\n *\n * @export\n * @param {number} t milliseconds\n * @returns after t milliseconds\n */\nexport function delay(t: number) {\n  return new Promise(resolve => {\n    setTimeout(resolve.bind(null, {}), t)\n  })\n}\n\ntype SynapseError = {\n  reason: string\n}\n\nexport interface SynapseClientError extends Error {\n  reason: string\n  status: number\n}\n\n/*\n  0 - no internet connection\n  429 - too many concurrent requests\n  500>= - any status code of 500 or more is a server side error\n*/\nconst RETRY_STATUS_CODES = [0, 429, 500, 502, 503, 504]\n\nconst fetchWithExponentialTimeout = <T>(\n  url: RequestInfo,\n  options: RequestInit,\n  delayMs: number = 1000,\n): Promise<T> => {\n  return fetch(url, options)\n    .then(resp => {\n      return resp\n        .text()\n        .then(text => {\n          // try to parse it as json\n          try {\n            const json = JSON.parse(text)\n            return resp.ok ? Promise.resolve(json) : Promise.reject<T>(json)\n          } catch (error) {\n            // failed to parse json, return text\n            return resp.ok ? Promise.resolve(text) : Promise.reject<T>(text)\n          }\n        })\n        .catch((error: SynapseError) => {\n          if (resp.ok) {\n            // possible empty response\n            return Promise.resolve({\n              reason: error,\n              status: resp.status,\n            })\n          }\n          if (error.reason && resp.status) {\n            // successful return from server but invalid call\n            return Promise.reject({\n              ...error,\n              status: resp.status,\n            })\n          }\n          // This occurs if the response is not ok and does not have json or is empty\n          return Promise.reject({\n            reason: error,\n            status: resp.status,\n          })\n        })\n    })\n    .catch(error => {\n      if (error.status && RETRY_STATUS_CODES.indexOf(error.status) !== -1) {\n        return delay(delayMs).then(() => {\n          return fetchWithExponentialTimeout<T>(url, options, delayMs * 2)\n        })\n      } else {\n        return Promise.reject(error)\n      }\n    })\n}\n\nexport const doPost = <T>(\n  url: string,\n  requestJsonObject: any,\n  sessionToken: string | undefined,\n  initCredentials: RequestInit['credentials'],\n  endpoint: BackendDestinationEnum,\n): Promise<T> => {\n  const options: RequestInit = {\n    body: JSON.stringify(requestJsonObject),\n    headers: {\n      Accept: '*/*',\n      'Access-Control-Request-Headers': 'sessiontoken',\n      'Content-Type': 'application/json',\n    },\n    method: 'POST',\n    mode: 'cors',\n    credentials: initCredentials,\n  }\n  if (sessionToken) {\n    // @ts-ignore\n    options.headers.sessionToken = sessionToken\n  }\n  const usedEndpoint = getEndpoint(endpoint)\n  return fetchWithExponentialTimeout<T>(usedEndpoint + url, options)\n}\nexport const doGet = <T>(\n  url: string,\n  sessionToken: string | undefined,\n  initCredentials: RequestInit['credentials'],\n  endpoint: BackendDestinationEnum,\n) => {\n  const options: RequestInit = {\n    headers: {\n      Accept: '*/*',\n      'Access-Control-Request-Headers': 'sessiontoken',\n    },\n    method: 'GET',\n    mode: 'cors',\n    credentials: initCredentials,\n  }\n  if (sessionToken) {\n    // @ts-ignore\n    options.headers.sessionToken = sessionToken\n  }\n  const usedEndpoint = getEndpoint(endpoint)\n  return fetchWithExponentialTimeout<T>(usedEndpoint + url, options)\n}\n\nexport const doDelete = (\n  url: string,\n  sessionToken: string | undefined,\n  initCredentials: RequestInit['credentials'],\n  endpoint: BackendDestinationEnum,\n) => {\n  const options: RequestInit = {\n    headers: {\n      Accept: '*/*',\n      'Access-Control-Request-Headers': 'sessiontoken',\n    },\n    method: 'DELETE',\n    mode: 'cors',\n    credentials: initCredentials,\n  }\n  if (sessionToken) {\n    // @ts-ignore\n    options.headers.sessionToken = sessionToken\n  }\n  const usedEndpoint = getEndpoint(endpoint)\n  return fetchWithExponentialTimeout<void>(usedEndpoint + url, options)\n}\n\nexport const doPut = <T>(\n  url: string,\n  requestJsonObject: any,\n  sessionToken: string | undefined,\n  initCredentials: RequestInit['credentials'],\n  endpoint: BackendDestinationEnum,\n): Promise<any> => {\n  const options: RequestInit = {\n    body: JSON.stringify(requestJsonObject),\n    headers: {\n      Accept: '*/*',\n      'Access-Control-Request-Headers': 'sessiontoken',\n      'Content-Type': 'application/json',\n    },\n    method: 'PUT',\n    mode: 'cors',\n    credentials: initCredentials,\n  }\n  if (sessionToken) {\n    // @ts-ignore\n    options.headers.sessionToken = sessionToken\n  }\n  const usedEndpoint = getEndpoint(endpoint)\n  return fetchWithExponentialTimeout<T>(usedEndpoint + url, options)\n}\n\nexport const putRefreshSessionToken = (sessionToken: string) => {\n  return doPut(\n    '/auth/v1/session',\n    { sessionToken },\n    undefined,\n    undefined,\n    BackendDestinationEnum.REPO_ENDPOINT,\n  )\n}\n\nexport const getVersion = (): Promise<SynapseVersion> => {\n  return doGet<SynapseVersion>(\n    '/repo/v1/version',\n    undefined,\n    undefined,\n    BackendDestinationEnum.REPO_ENDPOINT,\n  )\n}\n\n/**\n * https://docs.synapse.org/rest/POST/download/list/add/async/start.html\n */\n//Start an asynchronous job to add files to a user's download list.\nexport const addFilesToDownloadList = (\n  request: AddFilesToDownloadListRequest,\n  sessionToken: string,\n  updateParentState?: any,\n) => {\n  return doPost<AsyncJobId>(\n    `file/v1/download/list/add/async/start`,\n    request,\n    sessionToken,\n    undefined,\n    BackendDestinationEnum.REPO_ENDPOINT,\n  )\n    .then((resp: AsyncJobId) => {\n      const requestUrl = `file/v1/download/list/add/async/get/${resp.token}`\n      return getAsyncResultFromJobId<AddFilesToDownloadListResponse>(\n        requestUrl,\n        sessionToken,\n        updateParentState,\n      ).then(data => {\n        dispatchDownloadListChangeEvent(data.downloadList)\n        return data\n      })\n    })\n    .catch((error: any) => {\n      throw error\n    })\n}\n\n/**\n * https://docs.synapse.org/rest/POST/entity/id/table/download/csv/async/start.html\n */\nexport const getDownloadFromTableRequest = (\n  request: DownloadFromTableRequest,\n  sessionToken: string | undefined = undefined,\n  updateParentState?: any,\n) => {\n  return doPost<AsyncJobId>(\n    `/repo/v1/entity/${request.entityId}/table/download/csv/async/start`,\n    request,\n    sessionToken,\n    undefined,\n    BackendDestinationEnum.REPO_ENDPOINT,\n  )\n    .then((resp: AsyncJobId) => {\n      const requestUrl = `/repo/v1/entity/${request.entityId}/table/download/csv/async/get/${resp.token}`\n      return getAsyncResultFromJobId<DownloadFromTableResult>(\n        requestUrl,\n        sessionToken,\n        updateParentState,\n      )\n    })\n    .catch((error: any) => {\n      throw error\n    })\n}\n\n/**\n * https://docs.synapse.org/rest/GET/fileHandle/handleId.html\n * Get a FileHandle using its ID.\n * Note: Only the user that created the FileHandle can access it directly.\n * @return FileHandle\n **/\nexport const getFileHandleById = (\n  handleId: string,\n  sessionToken: string | undefined = undefined,\n): Promise<FileHandle> => {\n  return doGet<FileHandle>(\n    `file/v1/fileHandle/${handleId}`,\n    sessionToken,\n    undefined,\n    BackendDestinationEnum.REPO_ENDPOINT,\n  )\n}\n\n/**\n * http://rest-docs.synapse.org/rest/GET/file/id.html\n * Get the actual URL of the file from with an associated object .\n * @return a short lived presignedURL to be redirected with\n **/\nexport const getActualFileHandleByIdURL = (\n  handleId: string,\n  sessionToken: string | undefined = undefined,\n  fileAssociateType: FileHandleAssociateType,\n  fileAssociateId: string,\n  redirect: boolean = true,\n) => {\n  // get the presigned URL for this file handle and open it in a new tab\n  doGet<string>(\n    `/file/v1/file/${handleId}?fileAssociateType=${fileAssociateType}&fileAssociateId=${fileAssociateId}&redirect=${redirect}`,\n    sessionToken,\n    undefined,\n    BackendDestinationEnum.REPO_ENDPOINT,\n  )\n    .then(url => {\n      window.open(url, '_blank')\n    })\n    .catch(err => {\n      console.error('Error on retrieving file handle url ', err)\n    })\n}\n\n/**\n * https://docs.synapse.org/rest/GET/fileHandle/handleId/url.html\n * Note: Only the user that created the FileHandle can use this method for download.\n * @return a short lived presignedURL to be redirected with\n **/\nexport const getFileHandleByIdURL = (\n  handleId: string,\n  sessionToken: string | undefined = undefined,\n) => {\n  // get the presigned URL for this file handle\n  return doGet<string>(\n    `file/v1/fileHandle/${handleId}/url?redirect=false`,\n    sessionToken,\n    undefined,\n    BackendDestinationEnum.REPO_ENDPOINT,\n  )\n}\n\nexport const getAsyncResultFromJobId = <T>(\n  urlRequest: string,\n  sessionToken: string | undefined = undefined,\n  updateParentState?: any,\n): Promise<T> => {\n  return doGet(\n    urlRequest,\n    sessionToken,\n    undefined,\n    BackendDestinationEnum.REPO_ENDPOINT,\n  )\n    .then((resp: any) => {\n      // is this the job status?\n      if (resp.jobState && resp.jobState !== 'FAILED') {\n        updateParentState &&\n          updateParentState({\n            asyncJobStatus: resp,\n          })\n        // still processing, wait for a second and try again\n        return delay(500).then(() => {\n          return getAsyncResultFromJobId<T>(\n            urlRequest,\n            sessionToken,\n            updateParentState,\n          )\n        })\n      }\n      // these must be the query results!\n      return resp\n    })\n    .catch(error => {\n      throw error\n    })\n}\n\n/**\n * http://docs.synapse.org/rest/POST/entity/id/table/query/nextPage/async/start.html\n * @param {*} queryBundleRequest\n * @param {*} sessionToken\n * @param {*} endpoint\n */\nexport const getQueryTableResults = (\n  queryBundleRequest: QueryBundleRequest,\n  sessionToken: string | undefined = undefined,\n  updateParentState?: any,\n): Promise<QueryResultBundle> => {\n  return doPost<AsyncJobId>(\n    `/repo/v1/entity/${queryBundleRequest.entityId}/table/query/async/start`,\n    queryBundleRequest,\n    sessionToken,\n    undefined,\n    BackendDestinationEnum.REPO_ENDPOINT,\n  )\n    .then(resp => {\n      return getAsyncResultFromJobId<QueryResultBundle>(\n        `/repo/v1/entity/${queryBundleRequest.entityId}/table/query/async/get/${resp.token}`,\n        sessionToken,\n        updateParentState,\n      )\n    })\n    .catch((error: any) => {\n      throw error\n    })\n}\n/**\n *  Run and return results from queryBundleRequest, queryBundle request must be of the\n *  form:\n *     {\n *        concreteType: String,\n *        query: {\n *           sql: String,\n *           partMask: Number\n *        }\n *     }\n * @param {*} queryBundleRequest\n * @param {*} [sessionToken=undefined]\n * @param {boolean} [onlyGetFacets=false] Specify if the query only needs facets and no\n * data-- (internally this limits the row count to 1 on the request)\n * @returns Full dataset from synapse table query\n */\n\nexport const getFullQueryTableResults = async (\n  queryBundleRequest: QueryBundleRequest,\n  sessionToken: string | undefined = undefined,\n): Promise<QueryResultBundle> => {\n  let data: QueryResultBundle\n  // get first page\n  let offset = 0\n  const { query, ...rest } = queryBundleRequest\n  const queryRequest: QueryBundleRequest = {\n    ...rest,\n    query: { ...query, offset: offset },\n    partMask:\n      queryBundleRequest.partMask |\n      SynapseConstants.BUNDLE_MASK_QUERY_MAX_ROWS_PER_PAGE,\n  }\n  let response = await getQueryTableResults(queryRequest, sessionToken)\n  data = response\n  // we are done if we return less than a max pagesize that the backend is willing to return.\n  let isDone =\n    response.queryResult.queryResults.rows.length < data.maxRowsPerPage!\n  offset += response.queryResult.queryResults.rows.length\n  queryRequest.query.limit = data.maxRowsPerPage // set the limit to the actual max rows per page\n\n  while (!isDone) {\n    queryRequest.query.offset = offset\n    // update the maxPageSize to the largest possible value after the first page is complete.  This is a no-op after the second page.\n\n    let response = await getQueryTableResults(queryRequest, sessionToken)\n    data.queryResult.queryResults.rows.push(\n      ...response.queryResult.queryResults.rows, // ... spread operator to push all elements on\n    )\n    isDone =\n      response.queryResult.queryResults.rows.length < queryRequest.query.limit!\n    offset += response.queryResult.queryResults.rows.length\n  }\n  return data\n}\n\n/**\n *  Log-in using the given username and password.  Will return a session token that must be used in\n *  authenticated requests.\n *  http://docs.synapse.org/rest/POST/login.html\n */\nexport const login = (\n  username: string,\n  password: string,\n  authenticationReceipt: string | null,\n  endpoint = BackendDestinationEnum.REPO_ENDPOINT,\n): Promise<LoginResponse> => {\n  return doPost(\n    '/auth/v1/login',\n    { username, password, authenticationReceipt },\n    undefined,\n    undefined,\n    endpoint,\n  )\n}\n/**\n * Get redirect url\n * https://docs.synapse.org/rest/POST/oauth2/authurl.html\n * @param {*} provider\n * @param {*} redirectUrl\n * @param {*} endpoint\n */\nexport const oAuthUrlRequest = (\n  provider: string,\n  redirectUrl: string,\n  endpoint = BackendDestinationEnum.REPO_ENDPOINT,\n) => {\n  return doPost(\n    '/auth/v1/oauth2/authurl',\n    { provider, redirectUrl },\n    undefined,\n    undefined,\n    endpoint,\n  )\n}\n/**\n * Get session token from SSO\n * https://docs.synapse.org/rest/POST/oauth2/session.html\n * @param {*} provider\n * @param {*} authenticationCode\n * @param {*} redirectUrl\n * @param {*} endpoint\n */\nexport const oAuthSessionRequest = (\n  provider: string,\n  authenticationCode: string | number,\n  redirectUrl: string,\n  endpoint: any = BackendDestinationEnum.REPO_ENDPOINT,\n) => {\n  return doPost(\n    '/auth/v1/oauth2/session',\n    { provider, authenticationCode, redirectUrl },\n    undefined,\n    undefined,\n    endpoint,\n  )\n}\n/**\n * Create an entity (Project, Folder, File, Table, View)\n * http://docs.synapse.org/rest/POST/entity.html\n */\nexport const createEntity = <T extends Entity>(\n  entity: T,\n  sessionToken: string | undefined,\n) => {\n  return doPost<T>(\n    '/repo/v1/entity',\n    entity,\n    sessionToken,\n    undefined,\n    BackendDestinationEnum.REPO_ENDPOINT,\n  )\n}\n/**\n * Create a project with the given name.\n * http://docs.synapse.org/rest/POST/entity.html\n */\nexport const createProject = (\n  name: string,\n  sessionToken: string | undefined,\n): Promise<Entity> => {\n  return createEntity(\n    {\n      name,\n      concreteType: 'org.sagebionetworks.repo.model.Project',\n    },\n    sessionToken,\n  )\n}\n\n/**\n * Return this user's UserProfile\n * http://docs.synapse.org/rest/GET/userProfile.html\n */\nexport const getUserProfile = (sessionToken: string | undefined) => {\n  return doGet<UserProfile>(\n    '/repo/v1/userProfile',\n    sessionToken,\n    undefined,\n    BackendDestinationEnum.REPO_ENDPOINT,\n  )\n}\n\n/**\n * Return this user's UserProfile\n * http://docs.synapse.org/rest/GET/userProfile.html\n */\nexport const getUserProfileById = (\n  sessionToken: string | undefined,\n  ownerId: string,\n) => {\n  return doGet<UserProfile>(\n    `/repo/v1/userProfile/${ownerId}`,\n    sessionToken,\n    undefined,\n    BackendDestinationEnum.REPO_ENDPOINT,\n  )\n}\n\n/**\n * Return this user's profile bundle\n * https://docs.synapse.org/rest/org/sagebionetworks/repo/model/UserBundle.html\n */\nexport const getUserBundle = (\n  id: string,\n  mask: number,\n  sessionToken: string | undefined,\n): Promise<UserBundle> => {\n  return doGet<UserBundle>(\n    `repo/v1/user/${id}/bundle?mask=${mask}`,\n    sessionToken,\n    undefined,\n    BackendDestinationEnum.REPO_ENDPOINT,\n  )\n}\n\n/**\n * Return batch of user group headers\n * https://docs.synapse.org/rest/org/sagebionetworks/repo/model/UserGroupHeaderResponsePage.html\n */\nexport const getGroupHeadersBatch = (\n  ids: string[],\n  sessionToken: string | undefined,\n): Promise<UserGroupHeaderResponsePage> => {\n  return doGet<UserGroupHeaderResponsePage>(\n    `repo/v1/userGroupHeaders/batch?ids=${ids.join(',')}`,\n    sessionToken,\n    undefined,\n    BackendDestinationEnum.REPO_ENDPOINT,\n  )\n}\n\nexport type UserProfileList = { list: UserProfile[] }\n/**\n * Return the User Profiles for the given list of user IDs\n * http://docs.synapse.org/rest/POST/userProfile.html\n */\nexport const getUserProfiles = (\n  list: string[],\n  sessionToken: string | undefined = undefined,\n): Promise<UserProfileList> => {\n  return doPost(\n    '/repo/v1/userProfile',\n    { list },\n    sessionToken,\n    undefined,\n    BackendDestinationEnum.REPO_ENDPOINT,\n  )\n}\n\n/**\n * Return the children (Files/Folders) of the given entity (Project or Folder).\n * http://docs.synapse.org/rest/POST/entity/children.html\n */\nexport const getEntityChildren = (\n  request: any,\n  sessionToken: string | undefined = undefined,\n) => {\n  return doPost(\n    '/repo/v1/entity/children',\n    request,\n    sessionToken,\n    undefined,\n    BackendDestinationEnum.REPO_ENDPOINT,\n  )\n}\n/**\n * Retrieve an entityId for a given parent ID and entity name.\n * https://docs.synapse.org/rest/POST/entity/child.html\n */\nexport const lookupChildEntity = (\n  request: EntityLookupRequest,\n  sessionToken: string | undefined = undefined,\n) => {\n  return doPost<EntityId>(\n    '/repo/v1/entity/child',\n    request,\n    sessionToken,\n    undefined,\n    BackendDestinationEnum.REPO_ENDPOINT,\n  )\n}\n\n/**\n * Get a batch of pre-signed URLs and/or FileHandles for the given list of FileHandleAssociations.\n * http://docs.synapse.org/rest/POST/fileHandle/batch.html\n */\nexport const getFiles = (\n  request: BatchFileRequest,\n  sessionToken: string | undefined = undefined,\n): Promise<BatchFileResult> => {\n  return doPost(\n    '/file/v1/fileHandle/batch',\n    request,\n    sessionToken,\n    undefined,\n    BackendDestinationEnum.REPO_ENDPOINT,\n  )\n}\n\n/**\n * Get a batch of pre-signed URLs and/or FileHandles for the given list of FileHandleAssociations.\n * http://docs.synapse.org/rest/POST/fileHandle/batch.html\n */\nexport const getBulkFiles = (\n  bulkFileDownloadRequest: BulkFileDownloadRequest,\n  sessionToken: string | undefined = undefined,\n): Promise<BulkFileDownloadResponse> => {\n  return doPost<AsyncJobId>(\n    'file/v1/file/bulk/async/start',\n    bulkFileDownloadRequest,\n    sessionToken,\n    undefined,\n    BackendDestinationEnum.REPO_ENDPOINT,\n  )\n    .then((asyncJobId: AsyncJobId) => {\n      const urlRequest = `/file/v1/file/bulk/async/get/${asyncJobId.token}`\n      return getAsyncResultFromJobId<BulkFileDownloadResponse>(\n        urlRequest,\n        sessionToken,\n      )\n    })\n    .catch(err => {\n      console.error('Error on getBulkFiles ', err)\n      return err\n    })\n}\n/**\n * Bundled access to Entity and related data components.\n * An EntityBundle can be used to create, fetch, or update an Entity and associated\n * objects with a single web service request.\n * See SynapseClient.test.js for an example partsMask.\n * https://docs.synapse.org/rest/org/sagebionetworks/repo/model/Entity.html\n */\ntype GetEntity = <T extends Entity>(\n  sessionToken: string | undefined,\n  entityId: string | number,\n  versionNumber?: string,\n) => Promise<T>\n\nexport const getEntity: GetEntity = <T>(\n  sessionToken: string | undefined = undefined,\n  entityId: string | number,\n  versionNumber?: string,\n) => {\n  const url = versionNumber\n    ? `/repo/v1/entity/${entityId}/version/${versionNumber}`\n    : `/repo/v1/entity/${entityId}`\n  return doGet(\n    url,\n    sessionToken,\n    undefined,\n    BackendDestinationEnum.REPO_ENDPOINT,\n  ) as Promise<T>\n}\n\n/**\n * Get the EntityHeader for a list of references with a POST.\n * If any item in the batch fails (e.g., with a 404) it will be EXCLUDED in the result set.\n * https://docs.synapse.org/rest/POST/entity/header.html\n */\nexport const getEntityHeader = (\n  references: ReferenceList,\n  sessionToken: string | undefined = undefined,\n) => {\n  return doPost(\n    'repo/v1/entity/header',\n    { references },\n    sessionToken,\n    undefined,\n    BackendDestinationEnum.REPO_ENDPOINT,\n  ) as Promise<PaginatedResults<EntityHeader>>\n}\n\nexport const updateEntity = <T extends Entity>(\n  entity: T,\n  sessionToken: string | undefined = undefined,\n): Promise<T> => {\n  const url = `/repo/v1/entity/${entity.id}`\n  return doPut(\n    url,\n    entity,\n    sessionToken,\n    undefined,\n    BackendDestinationEnum.REPO_ENDPOINT,\n  )\n}\n\nexport const deleteEntity = (\n  sessionToken: string | undefined = undefined,\n  entityId: string | number,\n) => {\n  const url = `/repo/v1/entity/${entityId}`\n  return doDelete(\n    url,\n    sessionToken,\n    undefined,\n    BackendDestinationEnum.REPO_ENDPOINT,\n  )\n}\n\n/**\n * Bundled access to Entity and related data components.\n * An EntityBundle can be used to create, fetch, or update an Entity and\n * associated objects with a single web service request.\n * See SynapseClient.test.js for an example partsMask.\n * http://docs.synapse.org/rest/GET/entity/id/version/versionNumber/bundle.html\n */\nexport const getEntityBundleForVersion = (\n  entityId: string | number,\n  version: string | number | undefined,\n  partsMask: string | number,\n  sessionToken: string | undefined = undefined,\n) => {\n  let url = `/repo/v1/entity/${entityId}`\n  if (version) {\n    url += `/version/ + ${version}`\n  }\n  url += `/bundle?mask= ${partsMask}`\n  return doGet(\n    url,\n    sessionToken,\n    undefined,\n    BackendDestinationEnum.REPO_ENDPOINT,\n  ) as Promise<any>\n}\n\n/**\n * Get a corresponding string value of ObjectType:\n **/\nfunction getObjectTypeToString(key: ObjectType) {\n  return ObjectType[key]\n}\n\n/**\n * Get Wiki page contents, call is of the form:\n * http://docs.synapse.org/rest/GET/entity/ownerId/wiki.html\n */\nexport const getEntityWiki = (\n  sessionToken: string | undefined,\n  ownerId: string | undefined,\n  wikiId: string | undefined = '',\n  objectType: ObjectType = ObjectType.ENTITY,\n) => {\n  const objectTypeString = getObjectTypeToString(objectType!)\n\n  const url = `/repo/v1/${objectTypeString?.toLocaleLowerCase()}/${ownerId}/wiki/${wikiId}`\n  return doGet<WikiPage>(\n    url,\n    sessionToken,\n    undefined,\n    BackendDestinationEnum.REPO_ENDPOINT,\n  )\n}\n\n/**\n * Returns synapse user favorites list given their session token\n * http://docs.synapse.org/rest/GET/favorite.html\n */\nexport const getUserFavorites = (sessionToken: string | undefined) => {\n  const url = 'repo/v1/favorite?offset=0&limit=200'\n  return doGet(\n    url,\n    sessionToken,\n    undefined,\n    BackendDestinationEnum.REPO_ENDPOINT,\n  ) as Promise<any>\n}\n\n/**\n * Get the user's list of teams they are on\n *\n * @param {*} id ownerID of the synapse user see - http://docs.synapse.org/rest/org/sagebionetworks/repo/model/UserProfile.html\n */\nexport const getUserTeamList = (\n  sessionToken: string | undefined,\n  id: string | number,\n) => {\n  const url = `repo/v1/user/${id}/team?offset=0&limit=200`\n  return doGet(\n    url,\n    sessionToken,\n    undefined,\n    BackendDestinationEnum.REPO_ENDPOINT,\n  )\n}\n/**\n * Get the user's list of teams they are on\n *\n * @param {*} id ownerID of the synapse user see -https://docs.synapse.org/rest/GET/teamMembers/id.html\n * @param {*} fragment (optional) a prefix of the user's first or last name or email address (optional)\n * @param {*} limit    (optional) the maximum number of members to return (default 10, max limit 50)\n * @param {*} offset   (optional) the starting index of the returned results (default 0)\n *\n */\nexport const getTeamList = (\n  sessionToken: string | undefined,\n  id: string | number,\n  fragment: string = '',\n  limit: number = 10,\n  offset: number = 0,\n) => {\n  const url = `repo/v1/teamMembers/${id}?limit=${limit}&offset=${offset}${\n    fragment ? `&fragment=${fragment}` : ''\n  }`\n  return doGet(\n    url,\n    sessionToken,\n    undefined,\n    BackendDestinationEnum.REPO_ENDPOINT,\n  )\n}\n\n/**\n * https://rest-docs.synapse.org/rest/GET/entity/ownerId/wikikey.html\n * Get the root WikiPageKey for an Entity.\n * Note: The caller must be granted the ACCESS_TYPE.READ permission on the owner.\n * @return WikiPageKey\n **/\nexport const getWikiPageKeyForEntity = (\n  sessionToken: string | undefined,\n  ownerId: string | number,\n): Promise<WikiPageKey> => {\n  const url = `repo/v1/entity/${ownerId}/wikikey`\n  return doGet<WikiPageKey>(\n    url,\n    sessionToken,\n    undefined,\n    BackendDestinationEnum.REPO_ENDPOINT,\n  )\n}\n\n/**\n * https://rest-docs.synapse.org/rest/GET/access_requirement/ownerId/wikikey.html\n * Get the root WikiPageKey for an Access Requirement.\n * Note: The caller must be granted the ACCESS_TYPE.READ permission on the owner.\n * @return WikiPageKey\n **/\nexport const getWikiPageKeyForAccessRequirement = (\n  sessionToken: string | undefined,\n  ownerId: string | number,\n): Promise<WikiPageKey> => {\n  const url = `repo/v1/access_requirement/${ownerId}/wikikey`\n  return doGet<WikiPageKey>(\n    url,\n    sessionToken,\n    undefined,\n    BackendDestinationEnum.REPO_ENDPOINT,\n  )\n}\n\nexport const getWikiAttachmentsFromEntity = (\n  sessionToken: string | undefined,\n  id: string | number,\n  wikiId: string | number,\n  objectType: ObjectType = ObjectType.ENTITY,\n): Promise<FileHandleResults> => {\n  const objectTypeString = getObjectTypeToString(objectType!)\n  const url = `repo/v1/${objectTypeString.toLocaleLowerCase()}/${id}/wiki2/${wikiId}/attachmenthandles`\n  return doGet(\n    url,\n    sessionToken,\n    undefined,\n    BackendDestinationEnum.REPO_ENDPOINT,\n  )\n}\nexport const getWikiAttachmentsFromEvaluation = (\n  sessionToken: string | undefined,\n  id: string | number,\n  wikiId: string | number,\n) => {\n  const url = `repo/v1/evaluation/${id}/wiki/${wikiId}/attachmenthandles`\n  return doGet(\n    url,\n    sessionToken,\n    undefined,\n    BackendDestinationEnum.REPO_ENDPOINT,\n  )\n}\n\nexport const getPresignedUrlForWikiAttachment = (\n  sessionToken: string | undefined,\n  id: string | number,\n  wikiId: string | number,\n  fileName: string,\n  objectType: ObjectType = ObjectType.ENTITY,\n): Promise<string> => {\n  const objectTypeString = getObjectTypeToString(objectType!)\n  const url = `repo/v1/${objectTypeString.toLocaleLowerCase()}/${id}/wiki2/${wikiId}/attachment?fileName=${fileName}&redirect=false`\n  return doGet(\n    url,\n    sessionToken,\n    undefined,\n    BackendDestinationEnum.REPO_ENDPOINT,\n  )\n}\n/**\n * Set the session token cookie.  Note that this will only succeed if your app is running on\n * a .synapse.org subdomain.\n *\n * @param {*} token Session token.  If undefined, then call should instruct the browser to delete the cookie.\n */\nexport const setSessionTokenCookie = async (\n  token: string | undefined,\n  sessionCallback: Function,\n) => {\n  if (IS_OUTSIDE_SYNAPSE_ORG) {\n    if (!token) {\n      cookies.remove(SESSION_TOKEN_COOKIE_KEY, { path: '/' })\n      // See - https://github.com/reactivestack/cookies/issues/189\n      await delay(100)\n    } else {\n      // set's cookie in session storage\n      cookies.set(SESSION_TOKEN_COOKIE_KEY, token, {\n        // expires in a day\n        maxAge: 60 * 60 * 24,\n        path: '/',\n      })\n    }\n    sessionCallback()\n  } else {\n    // will set cookie in the http header\n    doPost(\n      'Portal/sessioncookie',\n      { sessionToken: token },\n      undefined,\n      'include',\n      BackendDestinationEnum.PORTAL_ENDPOINT,\n    )\n      .then(_ => {\n        sessionCallback()\n      })\n      .catch(err => {\n        console.error('Error on setting session token ', err)\n      })\n  }\n}\n/**\n * Get the current session token from a cookie.  Note that this will only succeed if your app is running on\n * a .synapse.org subdomain.\n */\nexport const getSessionTokenFromCookie = async () => {\n  if (IS_OUTSIDE_SYNAPSE_ORG) {\n    return cookies.get(SESSION_TOKEN_COOKIE_KEY)\n  }\n  return doGet<string>(\n    'Portal/sessioncookie',\n    undefined,\n    'include',\n    BackendDestinationEnum.PORTAL_ENDPOINT,\n  )\n}\n\nexport const getPrincipalAliasRequest = (\n  sessionToken: string | undefined,\n  alias: string,\n  type: string,\n) => {\n  const url = 'repo/v1/principal/alias'\n  return doPost(\n    url,\n    { alias, type },\n    sessionToken,\n    undefined,\n    BackendDestinationEnum.REPO_ENDPOINT,\n  )\n}\n\n/*\nDuring SSO login, the authorization provider (Google) will\nsend the user back to the portal with an authorization code,\nwhich can be exchanged for a Synapse user session.\nThis function should be called whenever the root App is initialized\n(to look for this code parameter and complete the round-trip).\n*/\nexport const detectSSOCode = () => {\n  const redirectURL = getRootURL()\n  // 'code' handling (from SSO) should be preformed on the root page, and then redirect to original route.\n  let code: URL | null | string = new URL(window.location.href)\n  // in test environment the searchParams isn't defined\n  const { searchParams } = code\n  if (!searchParams) {\n    return\n  }\n  code = searchParams.get('code')\n  if (code) {\n    oAuthSessionRequest(\n      AUTH_PROVIDER,\n      code,\n      `${redirectURL}?provider=${AUTH_PROVIDER}`,\n      BackendDestinationEnum.REPO_ENDPOINT,\n    )\n      .then((synToken: any) => {\n        setSessionTokenCookie(synToken.sessionToken, () => {\n          // go back to original route after successful SSO login\n          const originalUrl = localStorage.getItem('after-sso-login-url')\n          localStorage.removeItem('after-sso-login-url')\n          if (originalUrl) {\n            window.location.replace(originalUrl)\n          }\n        })\n      })\n      .catch((err: any) => {\n        if (err.status === 404) {\n          // Synapse account not found, send to registration page\n          window.location.replace('https://www.synapse.org/#!RegisterAccount:0')\n        }\n        console.error('Error on sso sign in ', err)\n      })\n  }\n}\n\nexport const signOut = (sessionCallback: Function) => {\n  setSessionTokenCookie(undefined, sessionCallback)\n}\n\n/**\n * Upload file.  Note that this currently only supports Synapse storage (Sage s3 bucket)\n * @param sessionToken\n * @param file\n * @param endpoint\n */\nexport const uploadFile = (\n  sessionToken: string | undefined,\n  filename: string,\n  file: Blob,\n) => {\n  return new Promise<FileUploadComplete>(\n    (fileUploadResolve, fileUploadReject) => {\n      const partSize: number = Math.max(5242880, file.size / 10000)\n      const request: MultipartUploadRequest = {\n        contentType: file.type,\n        fileName: filename,\n        fileSizeBytes: file.size,\n        partSizeBytes: partSize,\n        storageLocationId: SYNAPSE_STORAGE_LOCATION_ID,\n      }\n      calculateMd5(file).then((md5: string) => {\n        request.contentMD5Hex = md5\n        startMultipartUpload(\n          sessionToken,\n          filename,\n          file,\n          request,\n          fileUploadResolve,\n          fileUploadReject,\n        )\n      })\n    },\n  )\n}\n\nconst calculateMd5 = (fileBlob: File | Blob): Promise<string> => {\n  // code taken from md5 example from library\n  return new Promise((resolve, reject) => {\n    const blobSlice = File.prototype.slice,\n      file = fileBlob,\n      chunkSize = 2097152, // Read in chunks of 2MB\n      chunks = Math.ceil(file.size / chunkSize),\n      spark = new SparkMD5.ArrayBuffer(),\n      fileReader = new FileReader()\n    let currentChunk = 0\n\n    fileReader.onload = function (e) {\n      console.log('read chunk nr', currentChunk + 1, 'of', chunks)\n      spark.append(fileReader.result as ArrayBuffer) // Append array buffer\n      currentChunk++\n\n      if (currentChunk < chunks) {\n        loadNext()\n      } else {\n        console.log('finished loading')\n        const md5: string = spark.end()\n        console.info('computed hash', md5) // Compute hash\n        resolve(md5)\n      }\n    }\n\n    fileReader.onerror = function () {\n      console.warn('oops, something went wrong.')\n      reject(fileReader.error)\n    }\n\n    const loadNext = () => {\n      const start = currentChunk * chunkSize,\n        end = start + chunkSize >= file.size ? file.size : start + chunkSize\n\n      fileReader.readAsArrayBuffer(blobSlice.call(file, start, end))\n    }\n    loadNext()\n  })\n}\n\nconst processFilePart = (\n  partNumber: number,\n  multipartUploadStatus: MultipartUploadStatus,\n  sessionToken: string | undefined,\n  fileName: string,\n  file: Blob,\n  request: MultipartUploadRequest,\n  fileUploadResolve: (fileUpload: FileUploadComplete) => void,\n  fileUploadReject: (reason: any) => void,\n) => {\n  if (multipartUploadStatus.clientSidePartsState![partNumber - 1]) {\n    // no-op. this part has already been processed!\n    return\n  }\n\n  const uploadId = multipartUploadStatus.uploadId\n  const presignedUploadUrlRequest: BatchPresignedUploadUrlRequest = {\n    uploadId,\n    contentType: 'application/octet-stream', // each part is binary\n    partNumbers: [partNumber],\n  }\n  const presignedUrlUrl = `/file/v1/file/multipart/${uploadId}/presigned/url/batch`\n  doPost<BatchPresignedUploadUrlResponse>(\n    presignedUrlUrl,\n    presignedUploadUrlRequest,\n    sessionToken,\n    undefined,\n    BackendDestinationEnum.REPO_ENDPOINT,\n  ).then(async (presignedUrlResponse: BatchPresignedUploadUrlResponse) => {\n    const presignedUrl =\n      presignedUrlResponse.partPresignedUrls[0].uploadPresignedUrl\n    // calculate the byte range\n    const startByte = (partNumber - 1) * request.partSizeBytes\n    let endByte = partNumber * request.partSizeBytes - 1\n    if (endByte >= request.fileSizeBytes) {\n      endByte = request.fileSizeBytes - 1\n    }\n    const fileSlice = file.slice(\n      startByte,\n      endByte + 1,\n      presignedUploadUrlRequest.contentType,\n    )\n    await uploadFilePart(\n      presignedUrl,\n      fileSlice,\n      presignedUploadUrlRequest.contentType,\n    )\n    // uploaded the part.  calculate md5 of the part and add the part to the upload\n    calculateMd5(fileSlice).then((md5: string) => {\n      const addPartUrl = `/file/v1/file/multipart/${uploadId}/add/${partNumber}?partMD5Hex=${md5}`\n      doPut(\n        addPartUrl,\n        undefined,\n        sessionToken,\n        undefined,\n        BackendDestinationEnum.REPO_ENDPOINT,\n      ).then((addPartResponse: AddPartResponse) => {\n        if (addPartResponse.addPartState === 'ADD_SUCCESS') {\n          // done with this part!\n          multipartUploadStatus.clientSidePartsState![partNumber - 1] = true\n          checkUploadComplete(\n            multipartUploadStatus,\n            fileName,\n            sessionToken,\n            fileUploadResolve,\n            fileUploadReject,\n          )\n        } else {\n          // retry after a brief delay\n          delay(1000).then(() => {\n            processFilePart(\n              partNumber,\n              multipartUploadStatus,\n              sessionToken,\n              fileName,\n              file,\n              request,\n              fileUploadResolve,\n              fileUploadReject,\n            )\n          })\n        }\n      })\n    })\n  })\n}\nexport const checkUploadComplete = (\n  status: MultipartUploadStatus,\n  fileHandleName: string,\n  sessionToken: string | undefined,\n  fileUploadResolve: (fileUpload: FileUploadComplete) => void,\n  fileUploadReject: (reason: any) => void,\n) => {\n  // if all client-side parts are true (uploaded), then complete the upload and get the file handle!\n  if (\n    status.clientSidePartsState!.every(v => {\n      return v\n    })\n  ) {\n    const url = `/file/v1/file/multipart/${status.uploadId}/complete`\n    doPut(\n      url,\n      undefined,\n      sessionToken,\n      undefined,\n      BackendDestinationEnum.REPO_ENDPOINT,\n    )\n      .then((newStatus: MultipartUploadStatus) => {\n        // success!\n        fileUploadResolve({\n          fileHandleId: newStatus.resultFileHandleId,\n          fileName: fileHandleName,\n        })\n      })\n      .catch(error => {\n        fileUploadReject(error)\n      })\n  }\n}\nconst uploadFilePart = async (\n  presignedUrl: string,\n  file: any,\n  contentType: string,\n) => {\n  // TODO: could try using axios to get upload progress, then update the client-side part state (change to numbers from 0-1)\n  // This would give progress for the single file (across all parts).\n  // The parent would still need to figure out progress (for the total file set).\n  await fetch(presignedUrl, {\n    method: 'PUT',\n    headers: {\n      'Content-Type': contentType,\n    },\n    body: file,\n  })\n}\nexport const startMultipartUpload = (\n  sessionToken: string | undefined,\n  fileName: string,\n  file: Blob,\n  request: MultipartUploadRequest,\n  fileUploadResolve: (fileUpload: FileUploadComplete) => void,\n  fileUploadReject: (reason: any) => void,\n) => {\n  const url = 'file/v1/file/multipart'\n  doPost<MultipartUploadStatus>(\n    url,\n    request,\n    sessionToken,\n    undefined,\n    BackendDestinationEnum.REPO_ENDPOINT,\n  )\n    .then(async (status: MultipartUploadStatus) => {\n      // started the upload\n      // keep track of the part state client-side\n      const clientSidePartsState: boolean[] = status.partsState\n        .split('')\n        .map(bit => bit === '1')\n      status.clientSidePartsState = clientSidePartsState\n      for (let i = 0; i < clientSidePartsState.length; i = i + 1) {\n        if (!clientSidePartsState[i]) {\n          // upload this part.  note that partNumber is always the index+1\n          await processFilePart(\n            i + 1,\n            status,\n            sessionToken,\n            fileName,\n            file,\n            request,\n            fileUploadResolve,\n            fileUploadReject,\n          )\n        }\n      }\n      // in case there is no upload work to do!\n      checkUploadComplete(\n        status,\n        fileName,\n        sessionToken,\n        fileUploadResolve,\n        fileUploadReject,\n      )\n    })\n    .catch(error => {\n      fileUploadReject(error)\n    })\n}\n\n/**\n * Return the content of the file (latest version) associated to the given FileEntity.\n * Be aware that if the target file size > 5MB, this method will throw an error.\n * @param sessionToken\n * @param fileEntity\n * @param endpoint\n */\nexport const getFileEntityContent = (\n  sessionToken: string,\n  fileEntity: FileEntity,\n): Promise<string> => {\n  // get the presigned URL, download the data, and send that back (via resolve())\n  return new Promise((resolve, reject) => {\n    const fileHandleAssociationList = [\n      {\n        associateObjectId: fileEntity.id,\n        associateObjectType: 'FileEntity',\n        fileHandleId: fileEntity.dataFileHandleId,\n      },\n    ]\n    const request: any = {\n      includeFileHandles: true,\n      includePreSignedURLs: true,\n      includePreviewPreSignedURLs: false,\n      requestedFiles: fileHandleAssociationList,\n    }\n    getFiles(request, sessionToken)\n      .then((data: BatchFileResult) => {\n        const presignedUrl: string = data.requestedFiles[0].preSignedURL!\n        const fileHandle: FileHandle = data.requestedFiles[0].fileHandle!\n        return getFileHandleContent(fileHandle, presignedUrl).then(\n          (content: string) => {\n            resolve(content)\n          },\n        )\n      })\n      .catch(err => {\n        reject(err)\n      })\n  })\n}\n\n/**\n * Return the FileHandle of the file associated to the given FileEntity.\n * * @param fileEntity: FileEntity\n * @param sessionToken\n * @param endpoint\n */\nexport const getFileEntityFileHandle = (\n  fileEntity: FileEntity,\n  sessionToken?: string,\n): Promise<FileHandle> => {\n  return new Promise((resolve, reject) => {\n    const fileHandleAssociationList: FileHandleAssociation[] = [\n      {\n        associateObjectId: fileEntity.id!,\n        associateObjectType: FileHandleAssociateType.FileEntity,\n        fileHandleId: fileEntity.dataFileHandleId,\n      },\n    ]\n    const request: BatchFileRequest = {\n      includeFileHandles: true,\n      includePreSignedURLs: false,\n      includePreviewPreSignedURLs: false,\n      requestedFiles: fileHandleAssociationList,\n    }\n    getFiles(request, sessionToken)\n      .then((data: BatchFileResult) => {\n        if (\n          data.requestedFiles.length > 0 &&\n          data.requestedFiles[0].fileHandle\n        ) {\n          return resolve(data.requestedFiles[0].fileHandle)\n        } else {\n          // not found, or not allowed to access\n          reject(data.requestedFiles[0].failureCode)\n        }\n      })\n      .catch(err => {\n        reject(err)\n      })\n  })\n}\n\nexport const getFileHandleContentFromID = (\n  fileHandleId: string,\n  sessionToken: string,\n): Promise<string> => {\n  // get the presigned URL, download the data, and send that back (via resolve())\n  return new Promise((resolve, reject) => {\n    // get the file handle and url\n    const getFileHandleByIdPromise = getFileHandleById(\n      fileHandleId,\n      sessionToken,\n    )\n    const getFileHandlePresignedUrlPromis = getFileHandleByIdURL(\n      fileHandleId,\n      sessionToken,\n    )\n    Promise.all([getFileHandleByIdPromise, getFileHandlePresignedUrlPromis])\n      .then(values => {\n        const fileHandle: FileHandle = values[0]\n        const presignedUrl: string = values[1]\n        return getFileHandleContent(fileHandle, presignedUrl).then(\n          (content: string) => {\n            resolve(content)\n          },\n        )\n      })\n      .catch(err => {\n        reject(err)\n      })\n  })\n}\n\nexport const getFileHandleContent = (\n  fileHandle: FileHandle,\n  presignedUrl: string,\n): Promise<string> => {\n  // get the presigned URL, download the data, and send that back (via resolve())\n  return new Promise((resolve, reject) => {\n    // sanity check!  must be less than 5MB\n    if (fileHandle.contentSize < MAX_JS_FILE_DOWNLOAD_SIZE) {\n      fetch(presignedUrl, {\n        method: 'GET',\n        mode: 'cors',\n        cache: 'no-cache',\n        headers: {\n          'Content-Type': fileHandle.contentType,\n        },\n      }).then(response => {\n        // the response is always decoded using UTF-8\n        response.text().then(text => {\n          resolve(text)\n        })\n      })\n    } else {\n      reject('File size exceeds max (5MB)')\n    }\n  })\n}\n\n/**\n * Create an ACL\n * https://docs.synapse.org/rest/POST/entity/id/acl.html\n */\nexport const createACL = (\n  entityId: string,\n  acl: AccessControlList,\n  sessionToken: string | undefined,\n) => {\n  return doPost(\n    `/repo/v1/entity/${entityId}/acl`,\n    acl,\n    sessionToken,\n    undefined,\n    BackendDestinationEnum.REPO_ENDPOINT,\n  )\n}\n\n/**\n * Submit an entity to an evaluation queue\n * https://docs.synapse.org/rest/POST/evaluation/submission.html\n */\nexport const submitToEvaluation = (\n  submission: Submission,\n  etag: string,\n  sessionToken: string | undefined,\n) => {\n  return doPost(\n    `/repo/v1/evaluation/submission?etag=${etag}`,\n    submission,\n    sessionToken,\n    undefined,\n    BackendDestinationEnum.REPO_ENDPOINT,\n  )\n}\n\nexport const getEvaluationPermissions = (\n  evalId: string,\n  sessionToken: string | undefined,\n) => {\n  return doGet<UserEvaluationPermissions>(\n    `/repo/v1/evaluation/${evalId}/permissions`,\n    sessionToken,\n    undefined,\n    BackendDestinationEnum.REPO_ENDPOINT,\n  )\n}\n\n/**\n * Get an evaluation queue\n * https://docs.synapse.org/rest/GET/evaluation/evalId.html\n */\nexport const getEvaluation = (\n  evalId: string,\n  sessionToken: string | undefined,\n): Promise<Evaluation> => {\n  if (!evalId) {\n    // we must explicitly handle this because /repo/v1/evaluation\n    // without an evalId is a valid API that returns a different API response\n    return Promise.reject(new Error('evalId is empty'))\n  }\n  return doGet<Evaluation>(\n    `/repo/v1/evaluation/${evalId}`,\n    sessionToken,\n    undefined,\n    BackendDestinationEnum.REPO_ENDPOINT,\n  )\n}\n\n/**\n * Update an existing evaluation queue\n * https://docs.synapse.org/rest/PUT/evaluation/evalId.html\n */\nexport const updateEvaluation = (\n  evaluation: Evaluation,\n  sessionToken: string | undefined,\n): Promise<Evaluation> => {\n  if (!evaluation.id) {\n    // we must explicitly handle this because /repo/v1/evaluation\n    // without an evalId is a valid API that returns a different API response\n    return Promise.reject(new Error('evaluation does not have an ID'))\n  }\n  return doPut<Evaluation>(\n    `/repo/v1/evaluation/${evaluation.id}`,\n    evaluation,\n    sessionToken,\n    undefined,\n    BackendDestinationEnum.REPO_ENDPOINT,\n  )\n}\n\n/**\n * Create an evaluation queue\n * https://docs.synapse.org/rest/POST/evaluation.html\n */\nexport const createEvaluation = (\n  evaluation: Evaluation,\n  sessionToken: string | undefined,\n): Promise<Evaluation> => {\n  return doPost<Evaluation>(\n    '/repo/v1/evaluation/',\n    evaluation,\n    sessionToken,\n    undefined,\n    BackendDestinationEnum.REPO_ENDPOINT,\n  )\n}\n\n/**\n * Delete an existing evaluation queue\n * https://docs.synapse.org/rest/PUT/evaluation/evalId.html\n */\nexport const deleteEvaluation = (\n  evalId: string,\n  sessionToken: string | undefined,\n): Promise<void> => {\n  return doDelete(\n    `/repo/v1/evaluation/${evalId}`,\n    sessionToken,\n    undefined,\n    BackendDestinationEnum.REPO_ENDPOINT,\n  )\n}\n\n/**\n * Get an evaluation round\n * https://docs.synapse.org/rest/GET/evaluation/evalId/round/evalRoundId.html\n */\nexport const getEvaluationRound = (\n  evalId: string,\n  evalRoundId: string,\n  sessionToken: string | undefined,\n): Promise<EvaluationRound> => {\n  return doGet(\n    `/repo/v1/evaluation/${evalId}/round/${evalRoundId}`,\n    sessionToken,\n    undefined,\n    BackendDestinationEnum.REPO_ENDPOINT,\n  )\n}\n\n/**\n * Get all evaluation rounds\n * https://docs.synapse.org/rest/GET/evaluation/evalId/round/list.html\n */\nexport const getEvaluationRoundsList = (\n  evalId: string,\n  evaluationRoundListRequest: EvaluationRoundListRequest | undefined,\n  sessionToken: string | undefined,\n): Promise<EvaluationRoundListResponse> => {\n  return doPost(\n    `/repo/v1/evaluation/${evalId}/round/list`,\n    evaluationRoundListRequest ?? {},\n    sessionToken,\n    undefined,\n    BackendDestinationEnum.REPO_ENDPOINT,\n  )\n}\n\n/**\n * Create an evaluation round\n * https://docs.synapse.org/rest/POST/evaluation/evalId/round/evalRoundId.html\n */\nexport const createEvaluationRound = (\n  evaluationRound: EvaluationRound,\n  sessionToken: string | undefined,\n): Promise<EvaluationRound> => {\n  return doPost(\n    `/repo/v1/evaluation/${evaluationRound.evaluationId}/round`,\n    evaluationRound,\n    sessionToken,\n    undefined,\n    BackendDestinationEnum.REPO_ENDPOINT,\n  )\n}\n\n/**\n * Update an evaluation round\n * https://docs.synapse.org/rest/PUT/evaluation/evalId/round/evalRoundId.html\n */\nexport const updateEvaluationRound = (\n  evaluationRound: EvaluationRound,\n  sessionToken: string | undefined,\n): Promise<EvaluationRound> => {\n  return doPut(\n    `/repo/v1/evaluation/${evaluationRound.evaluationId}/round/${evaluationRound.id}`,\n    evaluationRound,\n    sessionToken,\n    undefined,\n    BackendDestinationEnum.REPO_ENDPOINT,\n  )\n}\n\n/**\n * Delete an evaluation round\n * https://docs.synapse.org/rest/DELETE/evaluation/evalId/round/evalRoundId.html\n */\nexport const deleteEvaluationRound = (\n  evalId: string,\n  evalRoundId: string,\n  sessionToken: string | undefined,\n) => {\n  return doDelete(\n    `/repo/v1/evaluation/${evalId}/round/${evalRoundId}`,\n    sessionToken,\n    undefined,\n    BackendDestinationEnum.REPO_ENDPOINT,\n  )\n}\n\n/**\n * Executes a user-defined query over the Submissions of a specific Evaluation.\n * https://docs.synapse.org/rest/GET/evaluation/submission/query.html\n */\nexport const getEvaluationSubmissions = (\n  query: string,\n  sessionToken: string | undefined,\n): Promise<QueryTableResults> => {\n  return doGet(\n    `/repo/v1/evaluation/submission/query?query=${encodeURI(query)}`,\n    sessionToken,\n    undefined,\n    BackendDestinationEnum.REPO_ENDPOINT,\n  )\n}\n\n/**\n * Get user-friendly OAuth2 request information (to present to the user so they can choose if they want to give consent).\n * http://rest-docs.synapse.org/rest/POST/oauth2/description.html\n */\nexport const getOAuth2RequestDescription = (\n  oidcAuthRequest: OIDCAuthorizationRequest,\n): Promise<OIDCAuthorizationRequestDescription> => {\n  return doPost(\n    '/auth/v1/oauth2/description',\n    oidcAuthRequest,\n    undefined, // sessionToken: this is not an authenticated call\n    undefined,\n    BackendDestinationEnum.REPO_ENDPOINT,\n  )\n}\n\n/**\n * Check whether user has already granted consent for the given OAuth client, scope, and claims.\n * Consent persists for one year.\n */\nexport const hasUserAuthorizedOAuthClient = (\n  oidcAuthRequest: OIDCAuthorizationRequest,\n  sessionToken: string,\n): Promise<OAuthConsentGrantedResponse> => {\n  return doPost(\n    '/auth/v1/oauth2/consentcheck',\n    oidcAuthRequest,\n    sessionToken,\n    undefined,\n    BackendDestinationEnum.REPO_ENDPOINT,\n  )\n}\n\n/**\n * Get OAuth2 Client information (available to the public)\n */\nexport const getOAuth2Client = (\n  clientId: string,\n): Promise<OAuthClientPublic> => {\n  return doGet(\n    `/auth/v1/oauth2/client/${clientId}`,\n    undefined,\n    undefined,\n    BackendDestinationEnum.REPO_ENDPOINT,\n  )\n}\n\n/**\n * User consents to the given OIDCAuthorizationRequest (after being presented with all information returned by getOAuth2RequestDescription())\n * @param oidcAuthRequest\n * @param sessionToken\n * @param endpoint\n */\nexport const consentToOAuth2Request = (\n  oidcAuthRequest: OIDCAuthorizationRequest,\n  sessionToken: string | undefined,\n): Promise<AccessCodeResponse> => {\n  return doPost(\n    '/auth/v1/oauth2/consent',\n    oidcAuthRequest,\n    sessionToken,\n    undefined,\n    BackendDestinationEnum.REPO_ENDPOINT,\n  )\n}\n\n/***********************\n * FORM SERVICES\n * https://docs.synapse.org/rest/#org.sagebionetworks.repo.web.controller.FormController\n *************************/\n/**\n * Create a FormGroup\n * https://docs.synapse.org/rest/POST/form/group.html\n * @param name\n * @param sessionToken\n * @param endpoint\n */\nexport const createFormGroup = (\n  name: string,\n  sessionToken: string,\n): Promise<FormGroup> => {\n  return doPost(\n    `/repo/v1/form/group?name=${encodeURI(name)}`,\n    undefined,\n    sessionToken,\n    undefined,\n    BackendDestinationEnum.REPO_ENDPOINT,\n  )\n}\n\n/**\n * Get FormGroup ACL\n * https://docs.synapse.org/rest/GET/form/group/id/acl.html\n */\nexport const getFormACL = (\n  formGroupId: string,\n  sessionToken: string | undefined,\n): Promise<AccessControlList> => {\n  return doGet(\n    `/repo/v1/form/group/${formGroupId}/acl`,\n    sessionToken,\n    undefined,\n    BackendDestinationEnum.REPO_ENDPOINT,\n  )\n}\n\n/**\n * Update FormGroup ACL\n * https://docs.synapse.org/rest/PUT/form/group/id/acl.html\n */\nexport const updateFormACL = (\n  formGroupId: string,\n  newAcl: AccessControlList,\n  sessionToken: string | undefined,\n): Promise<AccessControlList> => {\n  return doPut(\n    `/repo/v1/form/group/${formGroupId}/acl`,\n    newAcl,\n    sessionToken,\n    undefined,\n    BackendDestinationEnum.REPO_ENDPOINT,\n  )\n}\n\n/**\n * Create a new FormData object\n * https://docs.synapse.org/rest/POST/form/data.html\n * @param formGroupId\n * @param name\n * @param sessionToken\n * @param endpoint\n */\nexport const createFormData = (\n  formGroupId: string,\n  name: string,\n  dataFileHandleId: string,\n  sessionToken: string,\n): Promise<FormData> => {\n  const newFormData: FormChangeRequest = {\n    name,\n    fileHandleId: dataFileHandleId,\n  }\n  return doPost(\n    `/repo/v1/form/data?groupId=${formGroupId}`,\n    newFormData,\n    sessionToken,\n    undefined,\n    BackendDestinationEnum.REPO_ENDPOINT,\n  )\n}\n\n/**\n * Update FormData object\n * https://docs.synapse.org/rest/PUT/form/data.html\n */\nexport const updateFormData = (\n  formDataId: string,\n  name: string,\n  dataFileHandleId: string,\n  sessionToken: string,\n): Promise<FormData> => {\n  const updatedFormData: FormChangeRequest = {\n    name,\n    fileHandleId: dataFileHandleId,\n  }\n  return doPut(\n    `/repo/v1/form/data/${formDataId}`,\n    updatedFormData,\n    sessionToken,\n    undefined,\n    BackendDestinationEnum.REPO_ENDPOINT,\n  )\n}\n\n/**\n * Delete FormData object\n * https://docs.synapse.org/rest/DELETE/form/data.html\n */\nexport const deleteFormData = (\n  formDataId: string,\n  sessionToken: string | undefined,\n) => {\n  return doDelete(\n    `/repo/v1/form/data/${formDataId}`,\n    sessionToken,\n    undefined,\n    BackendDestinationEnum.REPO_ENDPOINT,\n  )\n}\n\n/**\n * Submit the identified FormData for review.\n * https://docs.synapse.org/rest/POST/form/data/id/submit.html\n */\nexport const submitFormData = (\n  formDataId: string,\n  sessionToken: string | undefined,\n): Promise<FormData> => {\n  return doPost(\n    `/repo/v1/form/data/${formDataId}/submit`,\n    undefined,\n    sessionToken,\n    undefined,\n    BackendDestinationEnum.REPO_ENDPOINT,\n  )\n}\n\n/**\n * List FormData objects and their associated status that match the filters of the provided request that are\n * owned by the caller. Note: Only objects owned by the caller will be returned.\n * https://docs.synapse.org/rest/POST/form/data/list.html\n */\nexport const listFormData = (\n  request: ListRequest,\n  sessionToken: string | undefined,\n): Promise<ListResponse> => {\n  return doPost(\n    `/repo/v1/form/data/list`,\n    request,\n    sessionToken,\n    undefined,\n    BackendDestinationEnum.REPO_ENDPOINT,\n  )\n}\n\n/**\n * List FormData objects and their associated status that match the filters of the provided request for the entire\n * group. This is used by service accounts to process submissions.\n * https://docs.synapse.org/rest/POST/form/data/list/reviewer.html\n */\nexport const listFormDataAsFormAdmin = (\n  request: ListRequest,\n  sessionToken: string | undefined,\n): Promise<ListResponse> => {\n  return doPost(\n    `/repo/v1/form/data/list/reviewer`,\n    request,\n    sessionToken,\n    undefined,\n    BackendDestinationEnum.REPO_ENDPOINT,\n  )\n}\n\n/**\n * Called by the form processing service to accept a submitted data.\n * https://docs.synapse.org/rest/PUT/form/data/id/accept.html\n */\nexport const acceptFormData = (\n  formDataId: string,\n  sessionToken: string | undefined,\n): Promise<FormData> => {\n  return doPut(\n    `/repo/v1/form/data/${formDataId}/accept`,\n    undefined,\n    sessionToken,\n    undefined,\n    BackendDestinationEnum.REPO_ENDPOINT,\n  )\n}\n\n/**\n * Called by the form processing service to reject a submitted data.\n * https://docs.synapse.org/rest/PUT/form/data/id/reject.html\n */\nexport const rejectFormData = (\n  formDataId: string,\n  reason: string,\n  sessionToken: string | undefined,\n): Promise<FormData> => {\n  const formRejection: FormRejection = {\n    reason,\n  }\n  return doPut(\n    `/repo/v1/form/data/${formDataId}/reject`,\n    formRejection,\n    sessionToken,\n    undefined,\n    BackendDestinationEnum.REPO_ENDPOINT,\n  )\n}\n\n/**\n * Get Statistics\n * https://docs.synapse.org/rest/POST/statistics.html\n * Generic endpoint to retrieve statistics about objects. The user should have VIEW_STATISTICS access on the object referenced by the objectId in the request.\n */\nexport const getProjectStatistics = (\n  request: ProjectFilesStatisticsRequest,\n  sessionToken: string | undefined,\n): Promise<ProjectFilesStatisticsResponse> => {\n  return doPost(\n    `/repo/v1/statistics`,\n    request,\n    sessionToken,\n    undefined,\n    BackendDestinationEnum.REPO_ENDPOINT,\n  )\n}\n\n// see https://docs.synapse.org/rest/POST/restrictionInformation.html\nexport const getRestrictionInformation = (\n  request: RestrictionInformationRequest,\n  sessionToken: string | undefined,\n): Promise<RestrictionInformationResponse> => {\n  return doPost(\n    `/repo/v1/restrictionInformation`,\n    request,\n    sessionToken,\n    undefined,\n    BackendDestinationEnum.REPO_ENDPOINT,\n  )\n}\n/**\n * Returns a paginated result of access requirements associated for an entity\n *\n * See https://rest-docs.synapse.org/rest/GET/entity/id/accessRequirement.html\n *\n * @param {(string | undefined)} sessionToken token of user\n * @param {string} id id of entity\n * @param {number} [limit=50]\n * @param {number} [offset=0]\n * @returns {Promise<PaginatedResults<AccessRequirement>>}\n */\nexport const getAccessRequirement = (\n  sessionToken: string | undefined,\n  id: string,\n  limit: number = 50,\n  offset: number = 0,\n): Promise<PaginatedResults<AccessRequirement>> => {\n  const url = `/repo/v1/entity/${id}/accessRequirement?limit=${limit}&offset=${offset}`\n  return doGet<PaginatedResults<AccessRequirement>>(\n    url,\n    sessionToken,\n    undefined,\n    BackendDestinationEnum.REPO_ENDPOINT,\n  )\n}\n\n/**\n * Retrieve an access requirement status for a given access requirement ID.\n *\n * @param {string} requirementId id of entity to lookup\n * @returns {AccessRequirementStatus}\n */\n\nexport const getAccessRequirementStatus = (\n  sessionToken: string | undefined,\n  requirementId: string | number,\n): Promise<AccessRequirementStatus> => {\n  const url = `repo/v1/accessRequirement/${requirementId}/status`\n  return doGet(\n    url,\n    sessionToken,\n    undefined,\n    BackendDestinationEnum.REPO_ENDPOINT,\n  )\n}\n\n/**\n * Returns all the access requirements associated to an entity {id}, calling the\n * paginated getAccessRequirement service until all results are returned.\n *\n * @param {(string | undefined)} sessionToken token of user\n * @param {string} id id of entity to lookup\n * @returns {Promise<Array<AccessRequirement>>}\n */\nexport const getAllAccessRequirements = (\n  sessionToken: string | undefined,\n  id: string,\n): Promise<Array<AccessRequirement>> => {\n  // format function to be callable by getAllOfPaginatedService\n  const fn = (limit: number, offset: number) => {\n    const url = `/repo/v1/entity/${id}/accessRequirement?limit=${limit}&offset=${offset}`\n    return doGet<PaginatedResults<AccessRequirement>>(\n      url,\n      sessionToken,\n      undefined,\n      BackendDestinationEnum.REPO_ENDPOINT,\n    )\n  }\n  return getAllOfPaginatedService(fn)\n}\n\n/**\n *\n *\n * @param {(string | undefined)} sessionToken user session token\n * @param {(number | undefined)} id the unique immutable ID\n * @returns {AccessApproval}\n */\nexport const getAccessApproval = async (\n  sessionToken: string | undefined,\n  approvalId: number | undefined,\n): Promise<AccessApproval> => {\n  const url = `repo/v1/accessApproval/${approvalId}`\n  return doGet<AccessApproval>(\n    url,\n    sessionToken,\n    undefined,\n    BackendDestinationEnum.REPO_ENDPOINT,\n  )\n}\n\n/**\n *\n *\n * @param {(string | undefined)} sessionToken user session token\n * @param {AccessApproval} accessApproval access approval request object\n * @returns {AccessApproval}\n */\nexport const postAccessApproval = async (\n  sessionToken: string | undefined,\n  accessApproval: AccessApproval,\n): Promise<AccessApproval> => {\n  return doPost<AccessApproval>(\n    'repo/v1/accessApproval',\n    accessApproval,\n    sessionToken,\n    undefined,\n    BackendDestinationEnum.REPO_ENDPOINT,\n  )\n}\n\n// https://rest-docs.synapse.org/rest/GET/download/list.html\nexport const getDownloadList = (sessionToken: string | undefined) => {\n  return doGet<DownloadList>(\n    '/file/v1/download/list',\n    sessionToken,\n    undefined,\n    BackendDestinationEnum.REPO_ENDPOINT,\n  )\n}\n\nexport const getDownloadOrder = (\n  zipFileName: string | undefined,\n  sessionToken: string | undefined,\n): Promise<DownloadOrder> => {\n  const baseURL = '/file/v1/download/order'\n  const url = zipFileName ? `${baseURL}?zipFileName=${zipFileName}` : baseURL\n  return doPost(\n    url,\n    undefined,\n    sessionToken,\n    undefined,\n    BackendDestinationEnum.REPO_ENDPOINT,\n  )\n}\n\nexport type FunctionReturningPaginatedResults<T> = (\n  limit: number,\n  offset: number,\n) => Promise<PaginatedResults<T>>\n/**\n * Utility function to get all the results of a paginated service\n *\n * @template T Type of paginated service\n * @param {FunctionReturningPaginatedResults<T>} fn Function that returns a paginated synapse object, accepts a limit and offset\n * @returns\n */\nexport const getAllOfPaginatedService = async <T>(\n  fn: FunctionReturningPaginatedResults<T>,\n) => {\n  const limit = 50\n  let offset = 0\n  let existsMoreData = true\n  const results: T[] = []\n\n  while (existsMoreData) {\n    try {\n      const data = await fn(limit, offset)\n      results.push(...data.results)\n      offset += data.results.length\n      if (data.results.length < limit) {\n        existsMoreData = false\n      }\n    } catch (e) {\n      throw Error(`Error on getting paginated results ${e}`)\n    }\n  }\n\n  return results\n}\n\n// https://rest-docs.synapse.org/rest/POST/download/list/remove.html\nexport const deleteDownloadListFiles = (\n  list: FileHandleAssociation[],\n  sessionToken: string | undefined,\n): Promise<DownloadList> => {\n  return doPost<DownloadList>(\n    '/file/v1/download/list/remove',\n    { list },\n    sessionToken,\n    undefined,\n    BackendDestinationEnum.REPO_ENDPOINT,\n  ).then(data => {\n    dispatchDownloadListChangeEvent(data)\n    return data\n  })\n}\n\n// https://rest-docs.synapse.org/rest/DELETE/download/list.html ?\nexport const deleteDownloadList = (sessionToken: string | undefined) => {\n  return doDelete(\n    '/file/v1/download/list',\n    sessionToken,\n    undefined,\n    BackendDestinationEnum.REPO_ENDPOINT,\n  ).then(_ => {\n    dispatchDownloadListChangeEvent(undefined)\n  })\n}\n\n/**\n * http://rest-docs.synapse.org/rest/POST/entity/id/table/transaction/async/start.html\n * @param {*} tableUpdateRequest\n * @param {*} sessionToken\n * @param {*} endpoint\n * // technically returns a TableUpdateTransactionResponse, but I don't see any reason we need this\n */\nexport const updateTable = (\n  tableUpdateRequest: TableUpdateTransactionRequest,\n  sessionToken: string | undefined = undefined,\n  updateParentState?: any,\n): Promise<any> => {\n  return doPost<AsyncJobId>(\n    `/repo/v1/entity/${tableUpdateRequest.entityId}/table/transaction/async/start`,\n    tableUpdateRequest,\n    sessionToken,\n    undefined,\n    BackendDestinationEnum.REPO_ENDPOINT,\n  )\n    .then(resp => {\n      return getAsyncResultFromJobId<any>(\n        `/repo/v1/entity/${tableUpdateRequest.entityId}/table/transaction/async/get/${resp.token}`,\n        sessionToken,\n        updateParentState,\n      )\n    })\n    .catch((error: any) => {\n      throw error\n    })\n}\n\nexport const getTransformSqlWithFacetsRequest = (\n  transformSqlWithFacetsRequest: TransformSqlWithFacetsRequest,\n) => {\n  return doPost<SqlTransformResponse>(\n    '/repo/v1/table/sql/transform',\n    transformSqlWithFacetsRequest,\n    undefined, // no auth needed\n    undefined,\n    BackendDestinationEnum.REPO_ENDPOINT,\n  )\n}\n\nexport const createPersonalAccessToken = (\n  accessTokenGenerationRequest: AccessTokenGenerationRequest,\n  sessionToken: string | undefined,\n) => {\n  return doPost<AccessTokenGenerationResponse>(\n    '/auth/v1/personalAccessToken',\n    accessTokenGenerationRequest,\n    sessionToken,\n    undefined,\n    BackendDestinationEnum.REPO_ENDPOINT,\n  )\n}\n\nexport const getPersonalAccessTokenRecords = (\n  sessionToken: string | undefined,\n  nextPageToken: string | undefined,\n) => {\n  return doGet<AccessTokenRecordList>(\n    `/auth/v1/personalAccessToken${\n      nextPageToken ? '?nextPageToken=' + nextPageToken : ''\n    }`,\n    sessionToken,\n    undefined,\n    BackendDestinationEnum.REPO_ENDPOINT,\n  )\n}\n\nexport const deletePersonalAccessToken = (\n  accessTokenId: string,\n  sessionToken: string | undefined,\n) => {\n  return doDelete(\n    `/auth/v1/personalAccessToken/${accessTokenId}`,\n    sessionToken,\n    undefined,\n    BackendDestinationEnum.REPO_ENDPOINT,\n  )\n}\n","import * as React from 'react'\nimport ButtonContent from '../assets/ButtonContent'\nimport GoogleIcon from '../assets/GoogleIcon'\nimport { SynapseClient } from '../utils'\nimport {\n  getEndpoint,\n  BackendDestinationEnum,\n} from '../utils/functions/getEndpoint'\n\ntype State = {\n  username: string\n  password: string\n  email: string\n  isSignedIn: boolean\n  hasLoginInFailed: boolean\n  errorMessage: string\n}\n\ntype Props = {\n  theme: string\n  icon: boolean\n  googleRedirectUrl?: string\n  redirectUrl?: string // will redirect here after a successful login. if unset, reload the current page url.\n  sessionCallback: Function // Callback is invoked after login\n}\n\n/**\n *  Demo of user session, show login screen and handling user login submission.\n *\n *  To support Google SSO in your portal, you must add your domain to the Authorized Redirect URIs\n *  for Synapse authentication.\n *  This can be done by contacting synapseInfo@sagebionetworks.org to form a collaboration.\n *  Synapse engineers must add your redirect URL in the Google API console found at https://console.cloud.google.com/ for this functionality to work.\n *\n * @class Login\n * @extends {React.Component}\n */\nclass Login extends React.Component<Props, State> {\n  authenticationReceiptKey = 'last_user_authentication_receipt'\n\n  /**\n   * Creates a user session, maintaining credentials\n   * @param {*} props\n   * @memberof Login\n   */\n  constructor(props: Props) {\n    super(props)\n    this.state = {\n      email: '',\n      errorMessage: '',\n      hasLoginInFailed: false,\n      isSignedIn: false,\n      password: '',\n      username: '',\n    }\n    this.handleChange = this.handleChange.bind(this)\n    this.handleLogin = this.handleLogin.bind(this)\n    this.getLoginFailureView = this.getLoginFailureView.bind(this)\n    this.onGoogleSignIn = this.onGoogleSignIn.bind(this)\n  }\n  /**\n   * Updates internal state with the event that was triggered\n   *\n   * @param {*} event Form update\n   */\n  public handleChange(event: React.FormEvent<HTMLInputElement>): void {\n    const target = event.currentTarget\n    const name = target.name\n    const value = target.value\n    const newState: Pick<any, any> = { [name]: value }\n    this.setState(newState)\n  }\n  /**\n   * Handle user login on click\n   *\n   * @param {*} clickEvent Userclick event\n   */\n  public async handleLogin(clickEvent: React.FormEvent<HTMLElement>) {\n    clickEvent.preventDefault() // avoid page refresh\n    try {\n      // get last valid receipt\n      const authenticationReceipt = localStorage.getItem(\n        this.authenticationReceiptKey,\n      )\n      const data = await SynapseClient.login(\n        this.state.username,\n        this.state.password,\n        authenticationReceipt,\n      )\n      // now get session token from cookie has to be called in the portals repo\n      await SynapseClient.setSessionTokenCookie(\n        data.sessionToken,\n        this.props.sessionCallback,\n      )\n      // Set the new receipt\n      localStorage.setItem(\n        this.authenticationReceiptKey,\n        data.authenticationReceipt,\n      )\n    } catch (err) {\n      console.log('Error on login: ', err.reason)\n      this.setState({\n        errorMessage: err.reason,\n        hasLoginInFailed: true,\n        isSignedIn: false,\n      })\n    }\n  }\n\n  /**\n   * Shows user login failure view on login failure\n   *\n   * @returns view to be displayed on user sign in error.\n   */\n  public getLoginFailureView(): JSX.Element | boolean {\n    if (this.state.hasLoginInFailed) {\n      return (\n        <div>\n          <small className=\"form-text text-danger\">\n            {this.state.errorMessage}\n          </small>\n          <div className=\"invalid-feedback\" />\n        </div>\n      )\n    }\n    return false\n  }\n\n  public onGoogleSignIn(event: React.MouseEvent<HTMLButtonElement>) {\n    // save current route (so that we can go back here after SSO)\n    localStorage.setItem('after-sso-login-url', window.location.href)\n    event.preventDefault()\n    const redirectUrl = this.props.googleRedirectUrl\n      ? this.props.googleRedirectUrl\n      : `${SynapseClient.getRootURL()}?provider=${SynapseClient.AUTH_PROVIDER}`\n    SynapseClient.oAuthUrlRequest(SynapseClient.AUTH_PROVIDER, redirectUrl)\n      .then((data: any) => {\n        const authUrl = data.authorizationUrl\n        window.location = authUrl // ping the url\n      })\n      .catch((err: any) => {\n        console.log('Error on oAuth url ', err)\n      })\n  }\n  public render() {\n    const { theme, icon } = this.props\n    const googleTheme =\n      theme === 'dark'\n        ? 'SRC-google-button-dark-color'\n        : 'SRC-google-button-light-color'\n    return (\n      <div\n        id=\"loginPage\"\n        className=\"container loginContainer SRC-syn-border-spacing\"\n      >\n        <form>\n          <button\n            onClick={this.onGoogleSignIn}\n            className={`SRC-google-button ${googleTheme} SRC-marginBottomTen`}\n          >\n            <GoogleIcon key={1} active={true} />\n            <ButtonContent icon={icon} key={2}>\n              Sign in with Google\n            </ButtonContent>\n          </button>\n        </form>\n        <div className=\"SRC-center-text SRC-deemphasized-text SRC-marginBottomTen\">\n          or\n        </div>\n\n        <div className=\"SRC-centerAndJustifyContent SRC-marginBottomTen\">\n          <img\n            height=\"20px\"\n            style={{ marginRight: '10px' }}\n            alt={'sage bionetworks logo'}\n            src=\"https://s3.amazonaws.com/static.synapse.org/sage-bionetworks-logo.svg\"\n          />\n          Sign in with your Sage Bionetworks Synapse account\n        </div>\n        <form onSubmit={this.handleLogin} className=\"form-group\">\n          <input\n            autoComplete=\"username\"\n            placeholder=\"username or email\"\n            className=\"form-control SRC-marginBottomTop\"\n            id=\"exampleEmail\"\n            name=\"username\"\n            type=\"text\"\n            value={this.state.username}\n            onChange={this.handleChange}\n          />\n          <input\n            autoComplete=\"password\"\n            placeholder=\"password\"\n            className=\"form-control SRC-marginBottomTop\"\n            id=\"examplePassword\"\n            name=\"password\"\n            type=\"password\"\n            value={this.state.password}\n            onChange={this.handleChange}\n          />\n          {this.getLoginFailureView()}\n          <button\n            onSubmit={this.handleLogin}\n            type=\"submit\"\n            className=\"btn SRC-primary-background-color SRC-hoverWhiteText\n              SRC-whiteText m-1 SRC-google-button SRC-marginBottomTen\"\n          >\n            <ButtonContent icon={icon}>Sign in</ButtonContent>\n          </button>\n        </form>\n        <div>\n          <a\n            href={`${getEndpoint(\n              BackendDestinationEnum.PORTAL_ENDPOINT,\n            )}#!PasswordReset:0`}\n            className=\"SRC-floatLeft SRC-primary-text-color\"\n          >\n            Forgot password?\n          </a>\n          <span className=\"SRC-deemphasized-text SRC-floatRight\">\n            &nbsp;It's free!\n          </span>\n          <a\n            href={`${getEndpoint(\n              BackendDestinationEnum.PORTAL_ENDPOINT,\n            )}#!RegisterAccount:0`}\n            className=\"SRC-floatRight SRC-primary-text-color\"\n          >\n            Register\n          </a>\n        </div>\n      </div>\n    )\n  }\n}\nexport default Login\n","import { QueryBundleRequest } from '../synapseTypes/'\nimport { SynapseClient, SynapseConstants } from '..'\nimport { QueryResultBundle } from '../synapseTypes/'\nimport { cloneDeep } from 'lodash-es'\n\ntype PartialStateObject = {\n  hasMoreData: boolean\n  data: QueryResultBundle\n}\n\n/**\n * Retrieve the index of a column using the column name\n * @param name the column name\n * @param result the QueryResultBundle containing the columns\n * @returns The index of the column, or -1 if the column doesn't exist in the result\n */\nexport const getFieldIndex = (\n  name: string,\n  result: QueryResultBundle | undefined,\n) => {\n  return (\n    result?.selectColumns?.findIndex(el => {\n      return el.name === name\n    }) ?? -1\n  )\n}\n\n/**\n * Grab the next page of data, pulling in 25 more rows.\n *\n * @param {*} queryRequest Query request as specified by\n *                         https://docs.synapse.org/rest/org/sagebionetworks/repo/model/table/Query.html\n */\nexport const getNextPageOfData = async (\n  queryRequest: QueryBundleRequest,\n  data: QueryResultBundle,\n  token?: string,\n) => {\n  return await SynapseClient.getQueryTableResults(queryRequest, token)\n    .then((newData: QueryResultBundle) => {\n      const oldData: QueryResultBundle = cloneDeep(data)!\n      // push on the new data retrieved from the API call\n      const hasMoreData =\n        newData.queryResult.queryResults.rows.length ===\n        SynapseConstants.PAGE_SIZE\n      oldData.queryResult.queryResults.rows.push(\n        ...newData.queryResult.queryResults.rows,\n      )\n      const newState: PartialStateObject = {\n        hasMoreData,\n        data: oldData,\n      }\n      return newState\n    })\n    .catch(err => {\n      console.log('Failed to get data ', err)\n      return {} as PartialStateObject\n    })\n}\n","import React from 'react'\n\nconst Arrow = (props: React.SVGProps<SVGSVGElement>) => (\n  <svg\n    {...props}\n    className={`SRC-arrow-icon ${props.className ?? ''}`}\n    width=\"35\"\n    height=\"35\"\n    viewBox=\"0 0 35 35\"\n    fill=\"none\"\n    xmlns=\"http://www.w3.org/2000/svg\"\n  >\n    <path d=\"M0 15.2904L0 19.7096L26.5152 19.7096L14.3624 31.8624L17.5 35L35 17.5L17.5 -1.68579e-07L14.3624 3.13763L26.5152 15.2904L0 15.2904Z\" />\n  </svg>\n)\n\nexport default Arrow\n","import BrainhubCarousel, {\n  CarouselProps as BrainhubCarouselProps,\n} from '@brainhubeu/react-carousel'\nimport React, { useState } from 'react'\nimport Arrow from '../assets/icons/Arrow'\nimport useShowDesktop from '../utils/hooks/useShowDesktop'\nimport { SizeMe } from 'react-sizeme'\nimport '@brainhubeu/react-carousel/lib/style.css'\n\n// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Remainder\nfunction mod(a: number, b: number) {\n  return ((a % b) + b) % b\n}\n\nexport type CarouselProps = {\n  children: React.ReactElement[]\n  isLoading?: boolean\n}\n\nconst DesktopProps: BrainhubCarouselProps = {\n  clickToChange: true,\n  infinite: true,\n  slidesPerScroll: 1,\n  slidesPerPage: 3,\n  centered: true,\n  arrowLeft: <Arrow className=\"SRC-Carousel__LeftArrow\" />,\n  arrowRight: <Arrow className=\"SRC-Carousel__RightArrow\" />,\n  addArrowClickHandler: true,\n  breakpoints: {\n    1100: {\n      slidesPerPage: 1,\n    },\n  },\n}\n\nconst MobileProps: BrainhubCarouselProps = {\n  dots: true,\n  infinite: true,\n  slidesPerScroll: 1,\n  slidesPerPage: 1,\n}\n\n/**\n * Responsive carousel. The component will display a loading spinner if no children are passed via props.\n * Note that the child components must accept a className prop, or its class will be overriden\n */\nexport const Carousel: React.FunctionComponent<CarouselProps> = ({\n  children,\n  isLoading = false,\n}) => {\n  const showDesktop = useShowDesktop()\n  const [currentIndex, setCurrentIndex] = useState(0)\n\n  const styledChildren = React.Children.map(children, (child, index) => {\n    // react-carousel renders a flexbox that translates the visible portion to achieve the carousel effect.\n    // To create the 'infinite' effect, duplicates are rendered, and the translation sometimes 'jumps' to the previous identical part of the flex container\n    // Styling just the 'active' card (and not duplicates) causes CSS transitions to appear to run twice when the translation jumps\n    // Calculating the mod index lets us style all duplicates, preventing the user from seeing multiple transitions.\n    let childClass = child.props.className ?? ''\n    if (index === mod(currentIndex, children.length)) {\n      childClass += ' SRC-Carousel__SelectedCard'\n    } else {\n      childClass += ' SRC-Carousel__UnselectedCard'\n    }\n    return React.cloneElement(child, { className: childClass })\n  })\n\n  return isLoading ? (\n    <div className=\"spinner\" style={{ display: 'block' }} />\n  ) : (\n    <div className=\"SRC-Carousel\">\n      <SizeMe refreshMode=\"debounce\" noPlaceholder={true}>\n        {({ size }) => (\n          <BrainhubCarousel\n            {...(showDesktop ? DesktopProps : MobileProps)}\n            key={size.width!}\n            value={currentIndex}\n            onChange={value => setCurrentIndex(value)}\n          >\n            {styledChildren}\n          </BrainhubCarousel>\n        )}\n      </SizeMe>\n    </div>\n  )\n}\n\nexport default Carousel\n","import { useEffect, useState } from 'react'\nexport type UseShowDesktopProps = number\n\nexport const MOBILE_VIEWPORT_WIDTH = 600\n\nexport default function useShowDesktop(breakpoint?: UseShowDesktopProps) {\n  let usedBreakpoint = breakpoint ?? MOBILE_VIEWPORT_WIDTH\n  const [showDesktop, setShowDesktop] = useState(\n    window.innerWidth > usedBreakpoint,\n  )\n  useEffect(() => {\n    const listener = () => {\n      const updatedValue = window.innerWidth > usedBreakpoint\n      if (updatedValue !== showDesktop) {\n        setShowDesktop(updatedValue)\n      }\n    }\n    window.addEventListener('resize', listener)\n    return () => {\n      window.removeEventListener('resize', listener)\n    }\n  })\n\n  return showDesktop\n}\n","import React from 'react'\nimport { Button } from 'react-bootstrap'\n\nexport type ProjectCardProps = {\n  projectName: string\n  projectDescription: string\n  synId: string\n  image?: JSX.Element\n}\n\nexport const ProjectViewCard: React.FunctionComponent<\n  ProjectCardProps & React.HTMLAttributes<HTMLDivElement>\n> = ({ projectName, projectDescription, synId, image, ...domProps }) => {\n  return (\n    <div\n      {...domProps}\n      className={`cardContainer ProjectViewCard bootstrap-4-backport ${\n        domProps.className ?? ''\n      }`}\n    >\n      {image ? image : <div className={'ProjectViewCard__ImagePlaceholder'} />}\n      <div>\n        <div className=\"ProjectViewCard__ProjectName\">{projectName}</div>\n        <div className=\"ProjectViewCard__ProjectDescription\">\n          {projectDescription}\n        </div>\n      </div>\n      <Button\n        variant=\"primary\"\n        className=\"ProjectViewCard__ViewProjectButton\"\n        onClick={() =>\n          window.open(\n            `https://www.synapse.org/#!Synapse:${synId}`,\n            '_blank',\n            'noopener',\n          )\n        }\n      >\n        View Project\n      </Button>\n    </div>\n  )\n}\n","import * as React from 'react'\nimport { SRC_SIGN_IN_CLASS } from '../utils/SynapseConstants'\n\nexport type SignInProps = {\n  className?: string\n  style?: React.CSSProperties\n}\n// An event listener for the class SRC_SIGN_IN_CLASS is needed to trigger a download\n// modal\nconst SignInButton = ({ className, style }: SignInProps) => {\n  return (\n    <button\n      type=\"button\"\n      style={style}\n      className={`SignInButton ${SRC_SIGN_IN_CLASS} SRC-primary-text-color ${className}`}\n    >\n      Sign In\n    </button>\n  )\n}\n\nexport default SignInButton\n","import * as React from 'react'\nimport { SynapseClientError } from '../utils/SynapseClient'\nimport SignInButton from './SignInButton'\nimport { Alert, Button } from 'react-bootstrap'\nimport { FallbackProps } from 'react-error-boundary'\n\ntype ErrorProps = {\n  token?: string\n  error?: string | Error | SynapseClientError\n}\n\nfunction isSynapseClientError(\n  error: string | Error | SynapseClientError,\n): error is SynapseClientError {\n  return (error as any).status !== undefined\n}\n\nfunction isError(error: string | Error | SynapseClientError): error is Error {\n  return (error as any).message !== undefined\n}\n\nfunction isString(error: string | Error | SynapseClientError): error is string {\n  return typeof error === 'string'\n}\n\nexport const ClientError = (props: {\n  error: SynapseClientError\n  token?: string\n}) => {\n  const { error, token } = props\n  const loginError = (error.status === 403 || error.status === 401) && !token\n  const accessDenied = error.status === 403 && token\n\n  return (\n    <>\n      {loginError && (\n        <>\n          Please <SignInButton /> to view this resource.\n        </>\n      )}\n      {accessDenied && <>You are not authorized to access this resource.</>}\n      {\n        // if we don't have a friendly error message then show the error\n        !accessDenied && !loginError && <>{error.reason}</>\n      }\n    </>\n  )\n}\n\nexport const ErrorBanner = (props: ErrorProps) => {\n  const { error, token } = props\n\n  if (!error) {\n    return <></>\n  }\n\n  let synapseClientError: SynapseClientError | undefined = undefined\n  let jsError: Error | undefined = undefined\n  let stringError: string | undefined = undefined\n  if (isSynapseClientError(error)) {\n    synapseClientError = error\n  } else if (isError(error)) {\n    jsError = error\n  } else if (isString(error)) {\n    stringError = error\n  }\n  return (\n    <div className=\"Error\">\n      <Alert\n        dismissible={false}\n        show={true}\n        variant={'danger'}\n        transition={false}\n      >\n        <p>\n          {synapseClientError && (\n            <ClientError error={synapseClientError} token={token} />\n          )}\n          {jsError && jsError.message}\n          {stringError && stringError}\n        </p>\n      </Alert>\n    </div>\n  )\n}\n\nexport const ErrorBannerFallback = (props: FallbackProps) => {\n  return (\n    <div role=\"alert\" className=\"SRC-marginBottomTop\">\n      <ErrorBanner {...props}></ErrorBanner>\n      <Button onClick={props.resetErrorBoundary}>Reload</Button>\n    </div>\n  )\n}\n","import { SynapseClient, SynapseConstants } from '../../../utils'\nimport { getFieldIndex } from '../../../utils/functions/queryUtils'\nimport useGetQueryResultBundle from '../../../utils/hooks/useGetQueryResultBundle'\nimport { QueryBundleRequest } from '../../../utils/synapseTypes'\nimport React, { useState, useEffect } from 'react'\nimport Carousel from '../../Carousel'\nimport { ProjectViewCard } from './ProjectViewCard'\nimport { ErrorBanner } from '../../ErrorBanner'\n\nexport type ProjectViewCarouselProps = {\n  token?: string\n  entityId: string\n}\n\ntype ProjectData = {\n  projectName: string\n  projectDescription: string\n  entityId: string\n  imageFileName?: string\n  imageUrl?: string\n}\n\nenum ExpectedColumns {\n  ID = 'id',\n  PROJECT_DISPLAY_NAME = 'projectDisplayName',\n  NAME = 'name', // fallback\n  PROJECT_DESCRIPTION = 'projectDescription',\n  PROJECT_IMAGE = 'projectImageFileName',\n}\n\n/**\n * Display a carousel of projects using a Project View. Driven by the following annotations/column names:\n * projectDisplayName, projectDescription, projectImageFileName. The projectImageFileName must\n * be an attachment on the project's root wiki page.\n */\nexport const ProjectViewCarousel: React.FunctionComponent<ProjectViewCarouselProps> = ({\n  token,\n  entityId,\n}) => {\n  const queryBundleRequest: QueryBundleRequest = {\n    concreteType: 'org.sagebionetworks.repo.model.table.QueryBundleRequest',\n    entityId,\n    partMask:\n      SynapseConstants.BUNDLE_MASK_QUERY_SELECT_COLUMNS |\n      SynapseConstants.BUNDLE_MASK_QUERY_RESULTS,\n    query: {\n      sql: `select * from ${entityId}`,\n    },\n  }\n\n  const [projects, setProjects] = useState<ProjectData[]>([])\n  const [error, setError] = useState<Error>()\n  const {\n    queryResultBundle,\n    error: queryError,\n    isLoading,\n  } = useGetQueryResultBundle({\n    token,\n    queryBundleRequest,\n  })\n\n  useEffect(() => {\n    const getData = async () => {\n      try {\n        const entityIdIndex = getFieldIndex(\n          ExpectedColumns.ID,\n          queryResultBundle,\n        )\n        const displayNameColumnIndex = getFieldIndex(\n          ExpectedColumns.PROJECT_DISPLAY_NAME,\n          queryResultBundle,\n        )\n        const descriptionColumnIndex = getFieldIndex(\n          ExpectedColumns.PROJECT_DESCRIPTION,\n          queryResultBundle,\n        )\n        const nameColumnIndex = getFieldIndex(\n          ExpectedColumns.NAME,\n          queryResultBundle,\n        )\n        const imageColumnIndex = getFieldIndex(\n          ExpectedColumns.PROJECT_IMAGE,\n          queryResultBundle,\n        )\n\n        const projects: ProjectData[] =\n          queryResultBundle?.queryResult.queryResults.rows.map(row => {\n            return {\n              projectName:\n                row.values[displayNameColumnIndex] ??\n                row.values[nameColumnIndex],\n              projectDescription: row.values[descriptionColumnIndex],\n              imageFileName: row.values[imageColumnIndex],\n              entityId: row.values[entityIdIndex],\n            }\n          }) ?? []\n        if (queryError) {\n          throw queryError\n        }\n        if (projects.length === 0) {\n          // wait for data to load\n          return\n        }\n\n        for (const project of projects) {\n          try {\n            if (project.imageFileName) {\n              const wikiPageKey = await SynapseClient.getWikiPageKeyForEntity(\n                token,\n                project.entityId,\n              )\n\n              project.imageUrl = await SynapseClient.getPresignedUrlForWikiAttachment(\n                token,\n                project.entityId,\n                wikiPageKey.wikiPageId,\n                project.imageFileName!,\n              )\n            }\n          } catch (err) {\n            // Don't break the whole component just because we can't find an image.\n            // The user will just see the placeholder.\n            console.error(err)\n          }\n        }\n\n        setProjects(projects)\n      } catch (error) {\n        console.error(error)\n        setError(error)\n      }\n    }\n    getData()\n  }, [entityId, token, queryResultBundle, queryError])\n\n  return error ? (\n    <ErrorBanner error={error}></ErrorBanner>\n  ) : (\n    <Carousel isLoading={isLoading}>\n      {projects.map(project => {\n        return (\n          <ProjectViewCard\n            key={project.entityId}\n            projectName={project.projectName}\n            projectDescription={project.projectDescription}\n            synId={project.entityId}\n            image={\n              project.imageUrl ? (\n                <img\n                  src={project.imageUrl}\n                  alt={`Logo for ${project.projectName}`}\n                />\n              ) : undefined\n            }\n          />\n        )\n      })}\n    </Carousel>\n  )\n}\n\nexport default ProjectViewCarousel\n","import { QueryBundleRequest, QueryResultBundle } from '../synapseTypes'\nimport { useState } from 'react'\nimport useDeepCompareEffect from 'use-deep-compare-effect'\nimport { SynapseClientError } from '../SynapseClient'\nimport { SynapseClient } from '..'\n\nexport type GetQueryResultBundleProps = {\n  queryBundleRequest: QueryBundleRequest\n  token?: string\n}\n\ntype State = {\n  queryResultBundle: QueryResultBundle | undefined\n  isLoading: boolean\n  error: SynapseClientError | undefined\n}\n\nexport default function useGetQueryResultBundle(\n  props: GetQueryResultBundleProps,\n) {\n  const { queryBundleRequest, token } = props\n  const [state, setState] = useState<State>({\n    isLoading: false,\n    error: undefined,\n    queryResultBundle: undefined,\n  })\n\n  const { isLoading, error, queryResultBundle } = state\n  useDeepCompareEffect(() => {\n    const getData = async () => {\n      if (isLoading) {\n        return\n      }\n      setState({\n        isLoading: true,\n        error: undefined,\n        queryResultBundle: undefined,\n      })\n      try {\n        const data = await SynapseClient.getQueryTableResults(\n          queryBundleRequest,\n          token,\n        )\n        setState({\n          queryResultBundle: data,\n          error: undefined,\n          isLoading: false,\n        })\n      } catch (err) {\n        setState({\n          queryResultBundle: undefined,\n          error: err,\n          isLoading: false,\n        })\n      }\n    }\n    getData()\n  }, [queryBundleRequest, token])\n\n  return { queryResultBundle, error, isLoading }\n}\n","import * as React from 'react'\nimport { Button } from 'react-bootstrap'\nimport homepage_1 from '../../../images/homepage_1.svg'\nimport organizeResearch from '../../../images/organizeResearch.svg'\nimport getCredit from '../../../images/getCredit.svg'\nimport collaborate from '../../../images/collaborate.svg'\nimport dataSharing from '../../../images/dataSharing.svg'\nimport rImage from '../../../images/rClient.svg'\nimport python from '../../../images/python.svg'\nimport terminal from '../../../images/terminal.svg'\nimport java from '../../../images/java.svg'\nimport ProjectViewCarousel from '../../../lib/containers/home_page/project_view_carousel/ProjectViewCarousel'\nimport {\n  getEndpoint,\n  BackendDestinationEnum,\n} from 'lib/utils/functions/getEndpoint'\n\nexport type SynapseHomepageProps = {\n  token?: string\n}\n\nexport const SynapseHomepage: React.FunctionComponent<SynapseHomepageProps> = ({\n  token,\n}) => {\n  return (\n    <div className=\"bootstrap-4-backport SynapseHomepage\">\n      <div className=\"SynapseHomepage__Section PrimaryBackground\">\n        <div className=\"HeroContainer\">\n          <div className=\"Headline\">\n            <div>\n              <span className=\"Headline-Strong\">Organize</span>\n              <span className=\"Headline-Light\">\n                {' '}\n                your digital research assets.\n              </span>\n            </div>\n            <div>\n              <span className=\"Headline-Strong\">Get credit</span>\n              <span className=\"Headline-Light\"> for your research.</span>\n            </div>\n            <div>\n              <span className=\"Headline-Strong\">Collaborate</span>\n              <span className=\"Headline-Light\">\n                {' '}\n                with your colleagues and the public.\n              </span>\n            </div>\n          </div>\n          <img src={homepage_1} alt=\"\" className=\"HeroImage\" />\n          <div className=\"SignUpButtonContainer\">\n            <Button\n              href={`${getEndpoint(\n                BackendDestinationEnum.PORTAL_ENDPOINT,\n              )}#!LoginPlace:0`}\n              variant=\"light\"\n            >\n              Log in to Synapse\n            </Button>\n            <Button\n              href={`${getEndpoint(\n                BackendDestinationEnum.PORTAL_ENDPOINT,\n              )}#!RegisterAccount:0`}\n              variant=\"primary-900\"\n            >\n              Register Now\n            </Button>\n          </div>\n        </div>\n      </div>\n      <div className=\"SynapseHomepage__Section WhiteBackground\">\n        <div className=\"FlexContainerReverse\" style={{}}>\n          <img src={organizeResearch} className=\"SectionGraphic\" alt=\"\"></img>\n          <div className=\"SectionTextFlexContainer\">\n            <h2>Organize Your Digital Research Assets</h2>\n            <div>\n              <h3>Access Your Data Anywhere</h3>\n              <p className=\"SectionBody\">\n                Synapse provides APIs to store or access your data from the web\n                or programmatically via one of our supported analytical clients\n                (\n                <a\n                  href=\"https://r-docs.synapse.org/\"\n                  target=\"_blank\"\n                  rel=\"noopener noreferrer\"\n                >\n                  R\n                </a>\n                ,{' '}\n                <a\n                  href=\"https://python-docs.synapse.org/\"\n                  target=\"_blank\"\n                  rel=\"noopener noreferrer\"\n                >\n                  Python\n                </a>\n                ,{' '}\n                <a\n                  href=\"https://python-docs.synapse.org/build/html/CommandLineClient.html\"\n                  target=\"_blank\"\n                  rel=\"noopener noreferrer\"\n                >\n                  Command Line\n                </a>\n                ).\n              </p>\n            </div>\n            <div>\n              <h3>Query Structured Data</h3>\n              <p className=\"SectionBody\">\n                Use Synapse Tables to query structured data right from your web\n                browser, or from any analytical client.\n              </p>\n            </div>\n            <Button variant=\"primary\">Get Started Now</Button>\n          </div>\n        </div>\n      </div>\n      <div className=\"SynapseHomepage__Section OffWhiteBackground\">\n        <div className=\"FlexContainer\">\n          <img src={getCredit} className=\"SectionGraphic\" alt=\"\"></img>\n          <div className=\"SectionTextFlexContainer\">\n            <h2>Get Credit For Your Research</h2>\n            <div>\n              <h3>Record Provenance</h3>\n              <p className=\"SectionBody\">\n                Synapse provides tools to record and display provenance of your\n                analysis - giving you credit for each step of the work you do!\n              </p>\n            </div>\n            <div>\n              <h3>Mint a DOI</h3>\n              <p className=\"SectionBody\">\n                A digital object identifier (DOI) provides provides a persistent\n                and easy way to reference your digital assets in publications -\n                including data, code, or analysis results.\n              </p>\n            </div>\n            <Button variant=\"primary\">Get Started Now</Button>\n          </div>\n        </div>\n      </div>\n      <div className=\"SynapseHomepage__Section WhiteBackground\">\n        <div className=\"FlexContainerReverse\">\n          <img className=\"SectionGraphic\" src={collaborate} alt=\"\"></img>\n          <div className=\"SectionTextFlexContainer\">\n            <h2>Collaborate</h2>\n            <div>\n              <h3>Communicate Your Findings</h3>\n              <p className=\"SectionBody\">\n                Use the Synapse Wiki services to communicate your Project&apos;s\n                research findings by embedding rich content such as images,\n                Tables, Provenance, and even LaTeX equations.\n              </p>\n            </div>\n            <div>\n              <h3>Share Your Research</h3>\n              <p className=\"SectionBody\">\n                New Synapse Projects are private by default - share with your\n                colleagues, collaborators, and even make your work public!\n                Create Synapse Teams to manage your collaborations.\n              </p>\n            </div>\n            <Button variant=\"primary\">Get Started Now</Button>\n          </div>\n        </div>\n      </div>\n      <div className=\"SynapseHomepage__Section OffWhiteBackground\">\n        <div className=\"FlexContainer\">\n          <img src={dataSharing} className=\"SectionGraphic\" alt=\"\"></img>\n          <div className=\"SectionTextFlexContainer\">\n            <h2>Our Data Sharing Principles</h2>\n            <div>\n              <p className=\"SectionBody\">\n                Synapse operates under a complete governance process that\n                includes well-documented Terms and Conditions of Use, guidelines\n                and operating procedures, privacy enhancing technologies, as\n                well as the right of audit and external reviews.{' '}\n              </p>\n            </div>\n            <Button variant=\"primary\">Learn More About Data Sharing</Button>\n          </div>\n        </div>\n      </div>{' '}\n      <div className=\"SynapseHomepage__Section WhiteBackground\">\n        <div className=\"FlexContainerReverse\">\n          <div className=\"ClientFlexContainer SectionGraphic\">\n            <a\n              className=\"ClientFlexItem\"\n              href=\"https://r-docs.synapse.org/\"\n              target=\"_blank\"\n              rel=\"noopener noreferrer\"\n            >\n              <img src={rImage}></img>\n              <span>R Client</span>\n            </a>\n            <a\n              className=\"ClientFlexItem\"\n              href=\"https://python-docs.synapse.org/\"\n              target=\"_blank\"\n              rel=\"noopener noreferrer\"\n            >\n              <img src={python}></img>\n              <span>Python Client</span>\n            </a>\n            <a\n              className=\"ClientFlexItem\"\n              href=\"https://python-docs.synapse.org/build/html/CommandLineClient.html\"\n              target=\"_blank\"\n              rel=\"noopener noreferrer\"\n            >\n              <img src={terminal}></img>\n              <span>Command Line Client</span>\n            </a>\n            <a\n              className=\"ClientFlexItem\"\n              href=\"https://github.com/Sage-Bionetworks/Synapse-Repository-Services/blob/develop/client/synapseJavaClient/src/main/java/org/sagebionetworks/client/SynapseClient.java\"\n              target=\"_blank\"\n              rel=\"noopener noreferrer\"\n            >\n              <img src={java}></img>\n              <span>Java Client</span>\n            </a>\n          </div>\n          <div className=\"SectionTextFlexContainer\">\n            <h2>Synapse Easily Integrates Into Your Workflow</h2>\n            <div>\n              <p className=\"SectionBody\">\n                Create projects, upload &amp; download files, generate\n                provenance, query, create wikis and more all from the comfort of\n                your own code.\n              </p>\n            </div>\n            <Button variant=\"primary\">Learn More about REST API</Button>\n          </div>\n        </div>{' '}\n      </div>{' '}\n      <div className=\"SynapseHomepage__Section OffWhiteBackground\">\n        <div className=\"SynapseHomepage__Section__Centered\">\n          <h2>Synapse In Action</h2>\n          <ProjectViewCarousel entityId={'syn23567477'} />\n        </div>\n      </div>{' '}\n      <div className=\"SynapseHomepage__Section WhiteBackground\">\n        <div className=\"SynapseHomepage__Section__Centered\">\n          <h2>Our Partners</h2>\n          <div className=\"PartnerFlexContainer\">\n            <div className=\"PartnerFlexItem\">\n              <a\n                href=\"http://www.nhlbi.nih.gov/\"\n                target=\"_blank\"\n                rel=\"noopener noreferrer\"\n              >\n                <img\n                  alt=\"National Heart, Lung, and Blood Institute; NIH\"\n                  src=\"https://s3.amazonaws.com/static.synapse.org/images/nih-heart.svg\"\n                  width={'186px'}\n                />\n              </a>\n            </div>\n            <div className=\"PartnerFlexItem\">\n              <a\n                href=\"http://www.nimh.nih.gov/\"\n                target=\"_blank\"\n                rel=\"noopener noreferrer\"\n              >\n                <img\n                  alt=\"National Institute of Mental Health; NIH\"\n                  src={\n                    'https://s3.amazonaws.com/static.synapse.org/images/nih-mental.png'\n                  }\n                  width=\"141px\"\n                />\n              </a>\n            </div>\n            <div className=\"PartnerFlexItem\">\n              <a\n                href=\"http://www.sloan.org/\"\n                target=\"_blank\"\n                rel=\"noopener noreferrer\"\n              >\n                <img\n                  alt=\"Alfred P. Sloan Foundation\"\n                  src=\"https://s3.amazonaws.com/static.synapse.org/images/sloan.svg\"\n                  width={'186px'}\n                />\n              </a>\n            </div>\n            <div className=\"PartnerFlexItem\">\n              <a\n                href=\"http://www.nia.nih.gov/\"\n                target=\"_blank\"\n                rel=\"noopener noreferrer\"\n              >\n                <img\n                  alt=\"National Institute on Aging; NIH\"\n                  src=\"https://s3.amazonaws.com/static.synapse.org/images/nih-aging.svg\"\n                  width={'186px'}\n                />\n              </a>\n            </div>\n            <div className=\"PartnerFlexItem\">\n              <a\n                href=\"http://www.lsdfa.org/\"\n                target=\"_blank\"\n                rel=\"noopener noreferrer\"\n              >\n                <img\n                  alt=\"Life Sciences Discovery Fund\"\n                  src=\"https://s3.amazonaws.com/static.synapse.org/images/life-sciences.svg\"\n                  width={'186px'}\n                />\n              </a>\n            </div>\n            <div className=\"PartnerFlexItem\">\n              <a\n                href=\"http://www.ctf.org/\"\n                target=\"_blank\"\n                rel=\"noopener noreferrer\"\n              >\n                <img\n                  alt=\"Children's Tumor Foundation\"\n                  src=\"https://s3.amazonaws.com/static.synapse.org/images/ctf.svg\"\n                  width={'186px'}\n                />\n              </a>\n            </div>\n            <div className=\"PartnerFlexItem\">\n              <a\n                href=\"http://www.n-tap.org/\"\n                target=\"_blank\"\n                rel=\"noopener noreferrer\"\n              >\n                <img\n                  alt=\"Neurofibromatosis Therapeutic Acceleration Program\"\n                  src=\"https://s3.amazonaws.com/static.synapse.org/images/ntap.png\"\n                  width=\"113px\"\n                />\n              </a>\n            </div>\n          </div>\n        </div>\n      </div>\n      <div className=\"SynapseHomepage__Section PrimaryBackground\">\n        <div className=\"SynapseHomepage__Section__Centered\">\n          <div\n            style={{\n              margin: 'auto',\n              maxWidth: '1400px',\n              display: 'flex',\n              flexDirection: 'column',\n            }}\n          >\n            <h2 style={{ color: '#fff' }}>Sign up for Synapse today</h2>\n            <div className=\"SignUpButtonContainer\" style={{ margin: 'auto' }}>\n              <Button\n                href={`${getEndpoint(\n                  BackendDestinationEnum.PORTAL_ENDPOINT,\n                )}#!LoginPlace:0`}\n                variant=\"light\"\n              >\n                Log in to Synapse\n              </Button>\n              <Button\n                href={`${getEndpoint(\n                  BackendDestinationEnum.PORTAL_ENDPOINT,\n                )}#!RegisterAccount:0`}\n                variant=\"primary-900\"\n              >\n                Register Now\n              </Button>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  )\n}\n","import * as React from 'react'\nimport Login from '../../lib/containers/Login'\nimport logoSvg from '../../images/logo.svg'\nimport '../style/App.scss'\nimport '../style/DemoStyle.scss'\nimport '@fortawesome/fontawesome-free/css/all.css'\nimport { SynapseClient } from '../../lib/utils/'\nimport { Alert } from 'react-bootstrap'\nimport { SynapseHomepage } from './playground/SynapseHomepage'\n\n/**\n * Demo of features that can be used from src/demo/utils/SynapseClient\n * module\n */\n\ntype AppState = {\n  token: string\n  getSessionCalled: boolean\n}\nexport const TokenContext = React.createContext('')\n\nexport default class App extends React.Component<{}, AppState> {\n  constructor(props: any) {\n    super(props)\n    this.state = {\n      token: '',\n      getSessionCalled: false,\n    }\n  }\n\n  handleChange = (updatedState: {}): void => {\n    this.setState(updatedState)\n  }\n\n  public componentDidMount() {\n    // Note:  All portals should do this once on the initial app load.\n    // This looks for the session token cookie (HttpOnly, unable to directly access), and initialize the session if it does exists.\n    SynapseClient.detectSSOCode()\n    SynapseClient.getSessionTokenFromCookie()\n      .then(sessionToken =>\n        this.handleChange({ token: sessionToken, getSessionCalled: true }),\n      )\n      .catch((error: any) => {\n        console.error(error)\n        this.setState({\n          getSessionCalled: true,\n        })\n      })\n  }\n\n  getSession = async () => {\n    SynapseClient.detectSSOCode()\n    SynapseClient.getSessionTokenFromCookie()\n      .then(sessionToken => {\n        this.handleChange({ token: sessionToken })\n      })\n      .catch((error: any) => {\n        console.error(error)\n      })\n  }\n\n  renderLoginAndSignout(token: string): JSX.Element {\n    const signedInState = (\n      <div className=\"bg-success text-center\" role=\"alert\">\n        You are logged in.&nbsp;\n        <button\n          onClick={() => {\n            SynapseClient.signOut(this.getSession)\n          }}\n        >\n          <span aria-hidden=\"true\">Sign out</span>\n        </button>\n      </div>\n    )\n\n    const notSignedInState = (\n      <div className=\"text-center\">\n        <h4>Synapse Production (Google SSO redirects here)</h4>\n        <Login sessionCallback={this.getSession} theme={'light'} icon={true} />\n        <details>\n          <summary>\n            Synapse Staging (Google SSO redirects to staging site)\n          </summary>\n          <Login\n            sessionCallback={this.getSession}\n            theme={'dark'}\n            icon={true}\n            googleRedirectUrl={\n              'https://staging.synapse.org/Portal/oauth2callback?oauth2provider=GOOGLE_OAUTH_2_0'\n            }\n          />\n        </details>\n        <hr />\n      </div>\n    )\n\n    if (token && token !== '') {\n      return signedInState\n    } else {\n      return notSignedInState\n    }\n  }\n\n  public render(): JSX.Element {\n    const { getSessionCalled } = this.state\n\n    const alert = (\n      <Alert\n        dismissible={false}\n        show={true}\n        variant={'warning'}\n        transition={false}\n      >\n        <h4>@Deprecated</h4>\n        <p>\n          Demo a new component by creating a .md file of the same name\n          (Button.md for Button.tsx), and run the styleguidist server:{' '}\n          <code>yarn start-docs</code>\n        </p>\n      </Alert>\n    )\n\n    if (!getSessionCalled) {\n      // This lets us keep better track of API calls made, it avoids having the token cause an unecessary\n      // component update\n      return (\n        <div>\n          <div className=\"App-header text-center\">\n            <img src={logoSvg} className=\"App-logo\" alt=\"logo\" />\n            <h4 className=\"white-text\">Synapse React Client Demo</h4>\n          </div>\n          {alert}\n          <p> Getting session token... </p>\n        </div>\n      )\n    }\n    return <SynapseHomepage />\n  }\n}\n","import * as React from 'react'\nimport * as ReactDOM from 'react-dom'\nimport 'react-app-polyfill/ie11'\nimport 'react-app-polyfill/stable'\nimport App from './demo/containers/App'\n\nReactDOM.render(<App />, document.getElementById('root'))\n","// Folder exports\nexport * from './Download'\nexport * from './EvaluationQueryTable'\nexport * from './Table'\nexport * from './AccessRequirement'\n// https://basarat.gitbooks.io/typescript/docs/tips/barrel.html\nexport * from './AccessCodeResponse'\nexport * from './AccessControlList'\nexport * from './AddFilesToDownloadListRequest'\nexport * from './AddFilesToDownloadListResponse'\nexport * from './AddPartResponse'\nexport * from './AttachmentData'\nexport * from './BatchFileRequest'\nexport * from './BatchFileResult'\nexport * from './BatchPresignedUploadUrlRequest'\nexport * from './BatchPresignedUploadUrlResponse'\nexport * from './BulkFileDownloadRequest'\nexport * from './BulkFileDownloadResponse'\nexport * from './Entity'\nexport * from './EntityHeader'\nexport * from './EntityId'\nexport * from './EntityLookupRequest'\nexport * from './Evaluation'\nexport * from './EvaluationQueryTable'\nexport * from './FileDownloadSummary'\nexport * from './FileEntity'\nexport * from './FileHandle'\nexport * from './FileHandleAssociation'\nexport * from './FileHandleResults'\nexport * from './ExternalFileHandleInterface'\nexport * from './FileResult'\nexport * from './FileUploadComplete'\nexport * from './Forms'\nexport * from './LoginRequest'\nexport * from './LoginResponse'\nexport * from './MultipartUploadRequest'\nexport * from './MultipartUploadStatus'\nexport * from './OAuthClientPublic'\nexport * from './OIDCAuthorizationRequest'\nexport * from './OAuthConsentGrantedResponse'\nexport * from './OIDCAuthorizationRequestDescription'\nexport * from './PaginatedResults'\nexport * from './PartPresignedUrl'\nexport * from './ReferenceList'\nexport * from './ResourceAccess'\nexport * from './RestrictionInformation'\nexport * from './Statistics'\nexport * from './Submission'\nexport * from './SubmissionContributor'\nexport * from './SynapseVersion'\nexport * from './UserBundle'\nexport * from './UserGroupHeader'\nexport * from './UserGroupHeaderResponsePage'\nexport * from './UserPreference'\nexport * from './UserProfile'\nexport * from './VerificationSubmission'\nexport * from './WikiPage'\nexport * from './AccessApproval'\nexport * from './WikiPageKey'\n","export * from './QueryTableResults'"],"sourceRoot":""}